================================================================
Repopack Output File
================================================================

This file was generated by Repopack on: 2024-08-22T20:51:37.484Z

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This header section
2. Repository structure
3. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
1. This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
2. When processing this file, use the separators and "File:" markers to
  distinguish between different files in the repository.
3. Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repopack's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.



For more information about Repopack, visit: https://github.com/yamadashy/repopack

================================================================
Repository Structure
================================================================
restaurant-review-app/
  public/
    index.html
    manifest.json
    robots.txt
  src/
    components/
      Header.js
    pages/
      Home.js
      QRscanner.js
    index.js
  package.json
  README.md
restaurant-review-backend/
  config/
    database.js
  middleware/
    auth.js
  models/
    Coupon.js
    Restaurant.js
    Review.js
    User.js
  routes/
    coupons.js
    restaurants.js
    reviews.js
    users.js
  utils/
    qrCodeGenerator.js
    sentimentAnalysis.js
  package.json
  server.js
restaurant-review-frontend/
  public/
    index.html
  src/
    components/
      CouponList.js
      CouponPage.js
      CouponSystem.js
      Dashboard.js
      Footer.js
      Header.js
      QRScanner.js
      RestaurantCard.js
      RestaurantDashboard.js
      RestaurantList.js
      ReviewForm.js
      ReviewList.js
    context/
      AuthContext.js
    App.js
    index.js
  package.json
.gitignore
package.json

================================================================
Repository Files
================================================================

================
File: restaurant-review-app/public/index.html
================
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" href="%PUBLIC_URL%/favicon.ico" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <meta name="theme-color" content="#000000" />
    <meta
      name="description"
      content="Web site created using create-react-app"
    />
    <link rel="apple-touch-icon" href="%PUBLIC_URL%/logo192.png" />
    <!--
      manifest.json provides metadata used when your web app is installed on a
      user's mobile device or desktop. See https://developers.google.com/web/fundamentals/web-app-manifest/
    -->
    <link rel="manifest" href="%PUBLIC_URL%/manifest.json" />
    <!--
      Notice the use of %PUBLIC_URL% in the tags above.
      It will be replaced with the URL of the `public` folder during the build.
      Only files inside the `public` folder can be referenced from the HTML.

      Unlike "/favicon.ico" or "favicon.ico", "%PUBLIC_URL%/favicon.ico" will
      work correctly both with client-side routing and a non-root public URL.
      Learn how to configure a non-root public URL by running `npm run build`.
    -->
    <title>React App</title>
  </head>
  <body>
    <noscript>You need to enable JavaScript to run this app.</noscript>
    <div id="root"></div>
    <!--
      This HTML file is a template.
      If you open it directly in the browser, you will see an empty page.

      You can add webfonts, meta tags, or analytics to this file.
      The build step will place the bundled scripts into the <body> tag.

      To begin the development, run `npm start` or `yarn start`.
      To create a production bundle, use `npm run build` or `yarn build`.
    -->
  </body>
</html>

================
File: restaurant-review-app/public/manifest.json
================
{
  "short_name": "React App",
  "name": "Create React App Sample",
  "icons": [
    {
      "src": "favicon.ico",
      "sizes": "64x64 32x32 24x24 16x16",
      "type": "image/x-icon"
    },
    {
      "src": "logo192.png",
      "type": "image/png",
      "sizes": "192x192"
    },
    {
      "src": "logo512.png",
      "type": "image/png",
      "sizes": "512x512"
    }
  ],
  "start_url": ".",
  "display": "standalone",
  "theme_color": "#000000",
  "background_color": "#ffffff"
}

================
File: restaurant-review-app/public/robots.txt
================
# https://www.robotstxt.org/robotstxt.html
User-agent: *
Disallow:

================
File: restaurant-review-app/src/components/Header.js
================
import React from 'react';
import { Link } from 'react-router-dom';

function Header() {
  return (
    <header>
      <nav>
        <ul>
          <li><Link to="/">Home</Link></li>
          <li><Link to="/scan">Scan QR</Link></li>
          <li><Link to="/dashboard">Restaurant Dashboard</Link></li>
        </ul>
      </nav>
    </header>
  );
}

export default Header;

================
File: restaurant-review-app/src/pages/Home.js
================
import React from 'react';
import { Link } from 'react-router-dom';

function Home() {
  return (
    <div>
      <h1>Welcome to Restaurant Review App</h1>
      <Link to="/scan">Scan QR Code</Link>
    </div>
  );
}

export default Home;

================
File: restaurant-review-app/src/pages/QRscanner.js
================
import React, { useState } from 'react';
import { QrReader } from 'react-qr-reader';
import { useHistory } from 'react-router-dom';
import QRCode from 'qrcode.react';

function QRScanner() {
  const [result, setResult] = useState('No result');
  const [restaurantId, setRestaurantId] = useState('');
  const [generatedQR, setGeneratedQR] = useState('');
  const history = useHistory();

  const handleScan = (data) => {
    if (data) {
      setResult(data);
      // Assume the QR code contains the restaurant ID
      history.push(`/review/${data}`);
    }
  };

  const handleError = (err) => {
    console.error(err);
  };

  const generateQR = () => {
    if (restaurantId) {
      setGeneratedQR(restaurantId);
    }
  };

  return (
    <div>
      <h2>Scan Restaurant QR Code</h2>
      <QrReader
        delay={300}
        onError={handleError}
        onScan={handleScan}
        style={{ width: '100%' }}
      />
      <p>{result}</p>

      <h2>Generate QR Code for Restaurant</h2>
      <input 
        type="text" 
        value={restaurantId} 
        onChange={(e) => setRestaurantId(e.target.value)}
        placeholder="Enter Restaurant ID"
      />
      <button onClick={generateQR}>Generate QR Code</button>
      {generatedQR && (
        <div>
          <h3>Generated QR Code:</h3>
          <QRCode value={generatedQR} />
        </div>
      )}
    </div>
  );
}

export default QRScanner;

================
File: restaurant-review-app/src/index.js
================
import React from 'react';
import ReactDOM from 'react-dom';
import App from './App';

ReactDOM.render(
  <React.StrictMode>
    <App />
  </React.StrictMode>,
  document.getElementById('root')
);

================
File: restaurant-review-app/package.json
================
{
  "name": "restaurant-review-app",
  "version": "0.1.0",
  "private": true,
  "dependencies": {
    "@testing-library/jest-dom": "^5.17.0",
    "@testing-library/react": "^13.4.0",
    "@testing-library/user-event": "^13.5.0",
    "react": "^18.3.1",
    "react-dom": "^18.3.1",
    "react-scripts": "5.0.1",
    "web-vitals": "^2.1.4"
  },
  "scripts": {
    "start": "react-scripts start",
    "build": "react-scripts build",
    "test": "react-scripts test",
    "eject": "react-scripts eject"
  },
  "eslintConfig": {
    "extends": [
      "react-app",
      "react-app/jest"
    ]
  },
  "browserslist": {
    "production": [
      ">0.2%",
      "not dead",
      "not op_mini all"
    ],
    "development": [
      "last 1 chrome version",
      "last 1 firefox version",
      "last 1 safari version"
    ]
  }
}

================
File: restaurant-review-app/README.md
================
# Getting Started with Create React App

This project was bootstrapped with [Create React App](https://github.com/facebook/create-react-app).

## Available Scripts

In the project directory, you can run:

### `npm start`

Runs the app in the development mode.\
Open [http://localhost:3000](http://localhost:3000) to view it in your browser.

The page will reload when you make changes.\
You may also see any lint errors in the console.

### `npm test`

Launches the test runner in the interactive watch mode.\
See the section about [running tests](https://facebook.github.io/create-react-app/docs/running-tests) for more information.

### `npm run build`

Builds the app for production to the `build` folder.\
It correctly bundles React in production mode and optimizes the build for the best performance.

The build is minified and the filenames include the hashes.\
Your app is ready to be deployed!

See the section about [deployment](https://facebook.github.io/create-react-app/docs/deployment) for more information.

### `npm run eject`

**Note: this is a one-way operation. Once you `eject`, you can't go back!**

If you aren't satisfied with the build tool and configuration choices, you can `eject` at any time. This command will remove the single build dependency from your project.

Instead, it will copy all the configuration files and the transitive dependencies (webpack, Babel, ESLint, etc) right into your project so you have full control over them. All of the commands except `eject` will still work, but they will point to the copied scripts so you can tweak them. At this point you're on your own.

You don't have to ever use `eject`. The curated feature set is suitable for small and middle deployments, and you shouldn't feel obligated to use this feature. However we understand that this tool wouldn't be useful if you couldn't customize it when you are ready for it.

## Learn More

You can learn more in the [Create React App documentation](https://facebook.github.io/create-react-app/docs/getting-started).

To learn React, check out the [React documentation](https://reactjs.org/).

### Code Splitting

This section has moved here: [https://facebook.github.io/create-react-app/docs/code-splitting](https://facebook.github.io/create-react-app/docs/code-splitting)

### Analyzing the Bundle Size

This section has moved here: [https://facebook.github.io/create-react-app/docs/analyzing-the-bundle-size](https://facebook.github.io/create-react-app/docs/analyzing-the-bundle-size)

### Making a Progressive Web App

This section has moved here: [https://facebook.github.io/create-react-app/docs/making-a-progressive-web-app](https://facebook.github.io/create-react-app/docs/making-a-progressive-web-app)

### Advanced Configuration

This section has moved here: [https://facebook.github.io/create-react-app/docs/advanced-configuration](https://facebook.github.io/create-react-app/docs/advanced-configuration)

### Deployment

This section has moved here: [https://facebook.github.io/create-react-app/docs/deployment](https://facebook.github.io/create-react-app/docs/deployment)

### `npm run build` fails to minify

This section has moved here: [https://facebook.github.io/create-react-app/docs/troubleshooting#npm-run-build-fails-to-minify](https://facebook.github.io/create-react-app/docs/troubleshooting#npm-run-build-fails-to-minify)

================
File: restaurant-review-backend/config/database.js
================
// config/database.js
const mongoose = require('mongoose');

const connectDB = async () => {
  try {
    await mongoose.connect(process.env.MONGODB_URI, {
      useNewUrlParser: true,
      useUnifiedTopology: true,
    });
    console.log('MongoDB connected');
  } catch (err) {
    console.error('MongoDB connection error:', err);
    process.exit(1);
  }
};

module.exports = connectDB;

================
File: restaurant-review-backend/middleware/auth.js
================
// middleware/auth.js
const jwt = require('jsonwebtoken');

module.exports = function(req, res, next) {
  const token = req.header('x-auth-token');
  if (!token) return res.status(401).json({ msg: 'No token, authorization denied' });

  try {
    const decoded = jwt.verify(token, process.env.JWT_SECRET);
    req.user = decoded.user;
    next();
  } catch (err) {
    res.status(401).json({ msg: 'Token is not valid' });
  }
};

================
File: restaurant-review-backend/models/Coupon.js
================
// models/Coupon.js
const mongoose = require('mongoose');

const CouponSchema = new mongoose.Schema({
  code: { type: String, required: true, unique: true },
  discount: { type: Number, required: true },
  expiresAt: { type: Date, required: true },
  isUsed: { type: Boolean, default: false },
  userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
  createdAt: { type: Date, default: Date.now },
});

module.exports = mongoose.model('Coupon', CouponSchema);

================
File: restaurant-review-backend/models/Restaurant.js
================
// models/Review.js
const mongoose = require('mongoose');

const ReviewSchema = new mongoose.Schema({
  restaurantId: { type: mongoose.Schema.Types.ObjectId, ref: 'Restaurant', required: true },
  userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
  rating: { type: Number, required: true, min: 1, max: 5 },
  text: { type: String, required: true },
  sentiment: { type: Number, required: true },
  createdAt: { type: Date, default: Date.now },
});

ReviewSchema.post('save', async function() {
  const Restaurant = mongoose.model('Restaurant');
  const restaurant = await Restaurant.findById(this.restaurantId);
  
  restaurant.reviewCount += 1;
  restaurant.averageRating = (restaurant.averageRating * (restaurant.reviewCount - 1) + this.rating) / restaurant.reviewCount;
  
  await restaurant.save();
});

module.exports = mongoose.model('Review', ReviewSchema);

================
File: restaurant-review-backend/models/Review.js
================
// models/Review.js
const mongoose = require('mongoose');

const ReviewSchema = new mongoose.Schema({
  restaurantId: { type: mongoose.Schema.Types.ObjectId, ref: 'Restaurant', required: true },
  userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
  rating: { type: Number, required: true, min: 1, max: 5 },
  text: { type: String, required: true },
  sentiment: { type: Number, required: true },
  createdAt: { type: Date, default: Date.now },
});

module.exports = mongoose.models.Review || mongoose.model('Review', ReviewSchema);

================
File: restaurant-review-backend/models/User.js
================
// models/User.js
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const UserSchema = new mongoose.Schema({
  username: { type: String, required: true, unique: true },
  email: { type: String, required: true, unique: true },
  password: { type: String, required: true },
  role: { type: String, enum: ['user', 'restaurant_owner', 'admin'], default: 'user' },
  createdAt: { type: Date, default: Date.now },
});

UserSchema.pre('save', async function(next) {
  if (!this.isModified('password')) return next();
  this.password = await bcrypt.hash(this.password, 10);
  next();
});

UserSchema.methods.comparePassword = async function(candidatePassword) {
  return bcrypt.compare(candidatePassword, this.password);
};

module.exports = mongoose.model('User', UserSchema);

================
File: restaurant-review-backend/routes/coupons.js
================
// routes/coupons.js
const express = require('express');
const router = express.Router();
const Coupon = require('../models/Coupon');
const auth = require('../middleware/auth');

// Generate a new coupon
router.post('/generate', auth, async (req, res) => {
  const coupon = new Coupon({
    code: Math.random().toString(36).substring(7),
    discount: 10, // 10% discount
    expiresAt: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000), // 30 days from now
    userId: req.user.id
  });

  try {
    const newCoupon = await coupon.save();
    res.status(201).json(newCoupon);
  } catch (error) {
    res.status(400).json({ message: error.message });
  }
});

// Get all coupons for a user
router.get('/user', auth, async (req, res) => {
  try {
    const coupons = await Coupon.find({ userId: req.user.id, isUsed: false });
    res.json(coupons);
  } catch (error) {
    res.status(500).json({ message: error.message });
  }
});

// Redeem a coupon
router.post('/redeem', auth, async (req, res) => {
  try {
    const coupon = await Coupon.findOne({ code: req.body.code, isUsed: false });
    if (!coupon) {
      return res.status(404).json({ message: 'Invalid or already used coupon' });
    }

    if (coupon.expiresAt < Date.now()) {
      return res.status(400).json({ message: 'Coupon has expired' });
    }

    coupon.isUsed = true;
    await coupon.save();

    res.json({ message: 'Coupon redeemed successfully', discount: coupon.discount });
  } catch (error) {
    res.status(500).json({ message: error.message });
  }
});

module.exports = router;

================
File: restaurant-review-backend/routes/restaurants.js
================
// routes/restaurants.js
const express = require('express');
const router = express.Router();
const Restaurant = require('../models/Restaurant');
const auth = require('../middleware/auth');
const generateQRCode = require('../utils/qrCodeGenerator');

// Get all restaurants
router.get('/', async (req, res) => {
  try {
    const restaurants = await Restaurant.find();
    res.json(restaurants);
  } catch (error) {
    res.status(500).json({ message: error.message });
  }
});

// Get a specific restaurant
router.get('/:id', async (req, res) => {
  try {
    const restaurant = await Restaurant.findById(req.params.id);
    if (!restaurant) return res.status(404).json({ message: 'Restaurant not found' });
    res.json(restaurant);
  } catch (error) {
    res.status(500).json({ message: error.message });
  }
});

// Create a new restaurant (protected route)
router.post('/', auth, async (req, res) => {
  const restaurant = new Restaurant({
    name: req.body.name,
    address: req.body.address,
  });

  try {
    const newRestaurant = await restaurant.save();
    
    // Generate QR code
    const qrCodeData = `http://yourfrontend.com/review/${newRestaurant._id}`;
    const qrCodeImage = await generateQRCode(qrCodeData);
    
    // Update restaurant with QR code
    newRestaurant.qrCode = qrCodeImage;
    await newRestaurant.save();

    res.status(201).json(newRestaurant);
  } catch (error) {
    res.status(400).json({ message: error.message });
  }
});

// Update a restaurant (protected route)
router.patch('/:id', auth, async (req, res) => {
  try {
    const restaurant = await Restaurant.findById(req.params.id);
    if (!restaurant) return res.status(404).json({ message: 'Restaurant not found' });

    if (req.body.name) restaurant.name = req.body.name;
    if (req.body.address) restaurant.address = req.body.address;

    const updatedRestaurant = await restaurant.save();
    res.json(updatedRestaurant);
  } catch (error) {
    res.status(400).json({ message: error.message });
  }
});

// Delete a restaurant (protected route)
router.delete('/:id', auth, async (req, res) => {
  try {
    const restaurant = await Restaurant.findById(req.params.id);
    if (!restaurant) return res.status(404).json({ message: 'Restaurant not found' });

    await restaurant.remove();
    res.json({ message: 'Restaurant deleted successfully' });
  } catch (error) {
    res.status(500).json({ message: error.message });
  }
});

// Generate new QR code for a restaurant (protected route)
router.post('/:id/generate-qr', auth, async (req, res) => {
  try {
    const restaurant = await Restaurant.findById(req.params.id);
    if (!restaurant) return res.status(404).json({ message: 'Restaurant not found' });

    const qrCodeData = `http://yourfrontend.com/review/${restaurant._id}`;
    const qrCodeImage = await generateQRCode(qrCodeData);

    restaurant.qrCode = qrCodeImage;
    await restaurant.save();

    res.json({ message: 'QR code generated successfully', qrCode: qrCodeImage });
  } catch (error) {
    res.status(500).json({ message: error.message });
  }
});

module.exports = router;

================
File: restaurant-review-backend/routes/reviews.js
================
// routes/reviews.js
const express = require('express');
const router = express.Router();
const Review = require('../models/Review');
const Restaurant = require('../models/Restaurant');
const auth = require('../middleware/auth');
const analyzeSentiment = require('../utils/sentimentAnalysis');

// Get all reviews for a restaurant
router.get('/restaurant/:restaurantId', async (req, res) => {
  try {
    const reviews = await Review.find({ restaurantId: req.params.restaurantId });
    res.json(reviews);
  } catch (error) {
    res.status(500).json({ message: error.message });
  }
});

// Create a new review
router.post('/', auth, async (req, res) => {
  const { restaurantId, rating, text } = req.body;
  const sentiment = analyzeSentiment(text);

  const review = new Review({
    restaurantId,
    userId: req.user.id,
    rating,
    text,
    sentiment
  });

  try {
    const newReview = await review.save();
    res.status(201).json(newReview);
  } catch (error) {
    res.status(400).json({ message: error.message });
  }
});

// Get review summary for a restaurant
router.get('/summary/:restaurantId', async (req, res) => {
  try {
    const reviews = await Review.find({ restaurantId: req.params.restaurantId });
    const restaurant = await Restaurant.findById(req.params.restaurantId);

    const summary = {
      averageRating: restaurant.averageRating,
      totalReviews: restaurant.reviewCount,
      sentimentBreakdown: {
        positive: reviews.filter(r => r.sentiment > 0).length,
        neutral: reviews.filter(r => r.sentiment === 0).length,
        negative: reviews.filter(r => r.sentiment < 0).length
      }
    };

    res.json(summary);
  } catch (error) {
    res.status(500).json({ message: error.message });
  }
});

module.exports = router;

================
File: restaurant-review-backend/routes/users.js
================
// routes/users.js
const express = require('express');
const router = express.Router();
const bcrypt = require('bcryptjs');
const jwt = require('jsonwebtoken');
const User = require('../models/User');
const auth = require('../middleware/auth');

// Register a new user
router.post('/register', async (req, res) => {
  try {
    const { username, email, password, role } = req.body;
    let user = await User.findOne({ email });
    if (user) {
      return res.status(400).json({ msg: 'User already exists' });
    }

    user = new User({ username, email, password, role });
    await user.save();

    const payload = {
      user: {
        id: user.id,
        role: user.role
      }
    };

    jwt.sign(payload, process.env.JWT_SECRET, { expiresIn: '1h' }, (err, token) => {
      if (err) throw err;
      res.json({ token });
    });
  } catch (err) {
    console.error(err.message);
    res.status(500).send('Server error');
  }
});

// Login user
router.post('/login', async (req, res) => {
  try {
    const { email, password } = req.body;
    let user = await User.findOne({ email });
    if (!user) {
      return res.status(400).json({ msg: 'Invalid credentials' });
    }

    const isMatch = await user.comparePassword(password);
    if (!isMatch) {
      return res.status(400).json({ msg: 'Invalid credentials' });
    }

    const payload = {
      user: {
        id: user.id,
        role: user.role
      }
    };

    jwt.sign(payload, process.env.JWT_SECRET, { expiresIn: '1h' }, (err, token) => {
      if (err) throw err;
      res.json({ token });
    });
  } catch (err) {
    console.error(err.message);
    res.status(500).send('Server error');
  }
});

// Get user profile
router.get('/profile', auth, async (req, res) => {
  try {
    const user = await User.findById(req.user.id).select('-password');
    res.json(user);
  } catch (err) {
    console.error(err.message);
    res.status(500).send('Server error');
  }
});

module.exports = router;

================
File: restaurant-review-backend/utils/qrCodeGenerator.js
================
// utils/qrCodeGenerator.js
const qr = require('qrcode');

async function generateQRCode(data) {
  try {
    return await qr.toDataURL(data);
  } catch (err) {
    console.error('Error generating QR code:', err);
    throw err;
  }
}

module.exports = generateQRCode;

================
File: restaurant-review-backend/utils/sentimentAnalysis.js
================
// utils/sentimentAnalysis.js
const natural = require('natural');

const analyzer = new natural.SentimentAnalyzer('English', natural.PorterStemmer, 'afinn');

function analyzeSentiment(text) {
  const tokens = new natural.WordTokenizer().tokenize(text);
  return analyzer.getSentiment(tokens);
}

module.exports = analyzeSentiment;

================
File: restaurant-review-backend/package.json
================
{
  "name": "restaurant-review-backend",
  "version": "1.0.0",
  "description": "Backend for restaurant review application",
  "main": "server.js",
  "scripts": {
    "start": "node server.js",
    "dev": "nodemon server.js"
  },
  "keywords": [],
  "author": "",
  "license": "ISC",
  "dependencies": {
    "bcryptjs": "^2.4.3",
    "cors": "^2.8.5",
    "dotenv": "^16.4.5",
    "express": "^4.19.2",
    "jsonwebtoken": "^9.0.0",
    "mongoose": "^8.5.3",
    "natural": "^8.0.1",
    "qrcode": "^1.5.4"
  },
  "devDependencies": {
    "nodemon": "^3.1.4"
  }
}

================
File: restaurant-review-backend/server.js
================
// server.js
const express = require('express');
const cors = require('cors');
require('dotenv').config();
const connectDB = require('./config/database');

const app = express();
const PORT = process.env.PORT || 5001;

app.use(cors());
app.use(express.json());

// Connect to database
connectDB();

// Import routes
const restaurantRoutes = require('./routes/restaurants');
const reviewRoutes = require('./routes/reviews');
const couponRoutes = require('./routes/coupons');
const userRoutes = require('./routes/users');

// Use routes
app.use('/api/restaurants', restaurantRoutes);
app.use('/api/reviews', reviewRoutes);
app.use('/api/coupons', couponRoutes);
app.use('/api/users', userRoutes);

app.listen(PORT, () => console.log(`Server running on port ${PORT}`));

================
File: restaurant-review-frontend/public/index.html
================
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" href="%PUBLIC_URL%/favicon.ico" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <meta name="theme-color" content="#000000" />
    <meta
      name="description"
      content="Restaurant Review Application"
    />
    <link rel="apple-touch-icon" href="%PUBLIC_URL%/logo192.png" />
    <link rel="manifest" href="%PUBLIC_URL%/manifest.json" />
    <title>Restaurant Reviews</title>
  </head>
  <body>
    <noscript>You need to enable JavaScript to run this app.</noscript>
    <div id="root"></div>
  </body>
</html>

================
File: restaurant-review-frontend/src/components/CouponList.js
================
// src/components/CouponList.js
import React, { useState, useEffect } from 'react';
import api from '../utils/api';

function CouponList() {
  const [coupons, setCoupons] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);

  useEffect(() => {
    const fetchCoupons = async () => {
      try {
        setLoading(true);
        const response = await api.get('/coupons/user');
        setCoupons(response.data);
        setLoading(false);
      } catch (err) {
        setError('Failed to fetch coupons. Please try again later.');
        setLoading(false);
        console.error('Error fetching coupons:', err);
      }
    };

    fetchCoupons();
  }, []);

  if (loading) return <div>Loading coupons...</div>;
  if (error) return <div>{error}</div>;

  return (
    <div className="coupon-list">
      <h3>Your Coupons</h3>
      {coupons.length === 0 ? (
        <p>You don't have any coupons yet. Write a review to earn coupons!</p>
      ) : (
        coupons.map(coupon => (
          <div key={coupon._id} className="coupon">
            <h4>Discount: {coupon.discount}% off</h4>
            <p>Code: <strong>{coupon.code}</strong></p>
            <p>Valid until: {new Date(coupon.expiresAt).toLocaleDateString()}</p>
            <p>Status: {coupon.isUsed ? 'Used' : 'Available'}</p>
          </div>
        ))
      )}
    </div>
  );
}

export default CouponList;

================
File: restaurant-review-frontend/src/components/CouponPage.js
================
import React, { useState, useEffect } from 'react';

function CouponPage() {
  const [coupon, setCoupon] = useState(null);

  useEffect(() => {
    // Generate or fetch a coupon
    generateCoupon();
  }, []);

  const generateCoupon = () => {
    // This would typically involve an API call to your backend
    const newCoupon = {
      code: 'REVIEW10',
      discount: '10%',
      expiryDate: '2023-12-31'
    };
    setCoupon(newCoupon);
  };

  return (
    <div>
      <h2>Thank You for Your Review!</h2>
      {coupon ? (
        <div>
          <h3>Here's your coupon:</h3>
          <p>Code: {coupon.code}</p>
          <p>Discount: {coupon.discount}</p>
          <p>Valid until: {coupon.expiryDate}</p>
        </div>
      ) : (
        <p>Loading your coupon...</p>
      )}
    </div>
  );
}

export default CouponPage;

================
File: restaurant-review-frontend/src/components/CouponSystem.js
================
// src/components/CouponSystem.js
import React, { useState, useEffect } from 'react';
import axios from 'axios';

function CouponSystem() {
  const [coupons, setCoupons] = useState([]);
  const [couponCode, setCouponCode] = useState('');
  const [redeemMessage, setRedeemMessage] = useState('');

  useEffect(() => {
    const fetchCoupons = async () => {
      try {
        const response = await axios.get('/api/coupons/user/user-id'); // Replace with actual user ID
        setCoupons(response.data);
      } catch (error) {
        console.error('Error fetching coupons:', error);
      }
    };
    fetchCoupons();
  }, []);

  const handleRedeem = async () => {
    try {
      const response = await axios.post('/api/coupons/redeem', { code: couponCode });
      setRedeemMessage(response.data.message);
      setCouponCode('');
      // Refresh coupons list
      const updatedCoupons = await axios.get('/api/coupons/user/user-id'); // Replace with actual user ID
      setCoupons(updatedCoupons.data);
    } catch (error) {
      setRedeemMessage('Error redeeming coupon. Please try again.');
      console.error('Error redeeming coupon:', error);
    }
  };

  return (
    <div className="coupon-system">
      <h2>Your Coupons</h2>
      <div className="coupon-list">
        {coupons.map((coupon) => (
          <div key={coupon._id} className="coupon">
            <p>Code: {coupon.code}</p>
            <p>Discount: {coupon.discount}%</p>
            <p>Expires: {new Date(coupon.expiresAt).toLocaleDateString()}</p>
            <p>Status: {coupon.isUsed ? 'Used' : 'Available'}</p>
          </div>
        ))}
      </div>
      <div className="redeem-coupon">
        <h3>Redeem a Coupon</h3>
        <input
          type="text"
          value={couponCode}
          onChange={(e) => setCouponCode(e.target.value)}
          placeholder="Enter coupon code"
        />
        <button onClick={handleRedeem}>Redeem</button>
        {redeemMessage && <p>{redeemMessage}</p>}
      </div>
    </div>
  );
}

export default CouponSystem;

================
File: restaurant-review-frontend/src/components/Dashboard.js
================
// src/components/Dashboard.js
import React, { useState, useEffect, useContext } from 'react';
import { AuthContext } from '../context/AuthContext';
import api from '../utils/api';

function Dashboard() {
  const [restaurants, setRestaurants] = useState([]);
  const { user } = useContext(AuthContext);

  useEffect(() => {
    const fetchRestaurants = async () => {
      try {
        const response = await api.get('/restaurants/owner');
        setRestaurants(response.data);
      } catch (error) {
        console.error('Error fetching restaurants', error);
      }
    };

    if (user && user.role === 'restaurant_owner') {
      fetchRestaurants();
    }
  }, [user]);

  if (user.role !== 'restaurant_owner') {
    return <div>Access denied. Only restaurant owners can view this dashboard.</div>;
  }

  return (
    <div className="dashboard">
      <h2>Restaurant Owner Dashboard</h2>
      {restaurants.map(restaurant => (
        <div key={restaurant._id} className="dashboard-restaurant">
          <h3>{restaurant.name}</h3>
          <p>Average Rating: {restaurant.averageRating.toFixed(1)}</p>
          <p>Total Reviews: {restaurant.reviewCount}</p>
          <button onClick={() => {/* Add logic to view detailed stats */}}>View Detailed Stats</button>
        </div>
      ))}
    </div>
  );
}

export default Dashboard;

================
File: restaurant-review-frontend/src/components/Footer.js
================
import React from 'react';
import { Link } from 'react-router-dom';
import { useAuth } from '../context/AuthContext';

function Footer() {
  const { user, logout } = useAuth();

  return (
    <footer>
      <nav>
        <ul>
          <li><Link to="/">Home</Link></li>
          {user ? (
            <>
              <li><Link to="/profile">Profile</Link></li>
              <li><button onClick={logout}>Logout</button></li>
            </>
          ) : (
            <>
              <li><Link to="/login">Login</Link></li>
              <li><Link to="/register">Register</Link></li>
            </>
          )}
        </ul>
      </nav>
    </footer>
  );
}

export default Footer;

================
File: restaurant-review-frontend/src/components/Header.js
================
import React from 'react';
import { Link } from 'react-router-dom';
import { useAuth } from '../context/AuthContext';

function Header() {
  const { user, logout } = useAuth();

  return (
    <header>
      <nav>
        <ul>
          <li><Link to="/">Home</Link></li>
          {user ? (
            <>
              <li><Link to="/profile">Profile</Link></li>
              <li><Link to="/scan">Scan QR</Link></li>
              {user.role === 'restaurant_owner' && (
                <li><Link to="/dashboard">Dashboard</Link></li>
              )}
              <li><button onClick={logout}>Logout</button></li>
            </>
          ) : (
            <>
              <li><Link to="/login">Login</Link></li>
              <li><Link to="/register">Register</Link></li>
            </>
          )}
        </ul>
      </nav>
    </header>
  );
}

export default Header;

================
File: restaurant-review-frontend/src/components/QRScanner.js
================
import React, { useState, useRef } from 'react';
import { useNavigate } from 'react-router-dom';
import QrReader from 'react-qr-code';
import Webcam from 'react-webcam';

function QRScanner() {
  const [qrCode, setQrCode] = useState('');
  const [error, setError] = useState('');
  const navigate = useNavigate();
  const webcamRef = useRef(null);

  const handleScan = (data) => {
    if (data) {
      const restaurantId = data.split('/').pop();
      navigate(`/restaurant/${restaurantId}`);
    }
  };

  const handleError = (err) => {
    setError('Error scanning QR code. Please try again.');
    console.error(err);
  };

  const captureQR = () => {
    const imageSrc = webcamRef.current.getScreenshot();
    // Here you would typically send this image to a backend for QR code processing
    // For this example, we'll just simulate finding a QR code
    setQrCode('simulated-restaurant-id');
    handleScan('https://yourapp.com/restaurant/simulated-restaurant-id');
  };

  return (
    <div className="qr-scanner">
      <h2>Scan Restaurant QR Code</h2>
      <Webcam
        ref={webcamRef}
        screenshotFormat="image/jpeg"
        style={{ width: '100%', maxWidth: '300px', margin: '0 auto' }}
      />
      <button onClick={captureQR}>Capture QR Code</button>
      {qrCode && <QrReader value={qrCode} />}
      {error && <p className="error">{error}</p>}
    </div>
  );
}

export default QRScanner;

================
File: restaurant-review-frontend/src/components/RestaurantCard.js
================
// src/components/RestaurantCard.js
import React from 'react';

function RestaurantCard({ restaurant }) {
  return (
    <div className="restaurant-card">
      <h3>{restaurant.name}</h3>
      <p>{restaurant.address}</p>
      <p>Average Rating: {restaurant.averageRating.toFixed(1)}</p>
      <p>Reviews: {restaurant.reviewCount}</p>
    </div>
  );
}

export default RestaurantCard;

================
File: restaurant-review-frontend/src/components/RestaurantDashboard.js
================
// src/components/RestaurantDashboard.js
import React, { useState, useEffect } from 'react';
import { useParams } from 'react-router-dom';
import axios from 'axios';

function RestaurantDashboard() {
  const [restaurant, setRestaurant] = useState(null);
  const [reviews, setReviews] = useState([]);
  const [summary, setSummary] = useState({ positive: [], negative: [] });
  const { restaurantId } = useParams();

  useEffect(() => {
    const fetchData = async () => {
      try {
        const restaurantResponse = await axios.get(`/api/restaurants/${restaurantId}`);
        setRestaurant(restaurantResponse.data);

        const reviewsResponse = await axios.get(`/api/reviews/restaurant/${restaurantId}`);
        setReviews(reviewsResponse.data);

        const summaryResponse = await axios.get(`/api/reviews/summary/${restaurantId}`);
        setSummary(summaryResponse.data);
      } catch (error) {
        console.error('Error fetching dashboard data:', error);
      }
    };
    fetchData();
  }, [restaurantId]);

  return (
    <div className="restaurant-dashboard">
      <h2>{restaurant?.name} Dashboard</h2>
      <div className="summary">
        <h3>Review Summary</h3>
        <div className="positive">
          <h4>Positive Aspects</h4>
          <ul>
            {summary.positive.map((item, index) => (
              <li key={index}>{item}</li>
            ))}
          </ul>
        </div>
        <div className="negative">
          <h4>Areas for Improvement</h4>
          <ul>
            {summary.negative.map((item, index) => (
              <li key={index}>{item}</li>
            ))}
          </ul>
        </div>
      </div>
      <div className="reviews">
        <h3>Recent Reviews</h3>
        {reviews.map((review) => (
          <div key={review._id} className="review">
            <p>Rating: {review.rating}/5</p>
            <p>{review.text}</p>
            <p>Sentiment: {review.sentiment > 0 ? 'Positive' : review.sentiment < 0 ? 'Negative' : 'Neutral'}</p>
          </div>
        ))}
      </div>
    </div>
  );
}

export default RestaurantDashboard;

================
File: restaurant-review-frontend/src/components/RestaurantList.js
================
// src/components/RestaurantList.js
import React, { useState, useEffect } from 'react';
import { Link } from 'react-router-dom';
import api from '../utils/api';
import RestaurantCard from './RestaurantCard';

function RestaurantList() {
  const [restaurants, setRestaurants] = useState([]);

  useEffect(() => {
    const fetchRestaurants = async () => {
      try {
        const response = await api.get('/restaurants');
        setRestaurants(response.data);
      } catch (error) {
        console.error('Error fetching restaurants', error);
      }
    };
    fetchRestaurants();
  }, []);

  return (
    <div className="restaurant-list">
      <h2>Restaurants</h2>
      {restaurants.map(restaurant => (
        <Link to={`/restaurant/${restaurant._id}`} key={restaurant._id}>
          <RestaurantCard restaurant={restaurant} />
        </Link>
      ))}
    </div>
  );
}

export default RestaurantList;

================
File: restaurant-review-frontend/src/components/ReviewForm.js
================
// src/components/ReviewForm.js
import React, { useState, useEffect } from 'react';
import { useParams } from 'react-router-dom';
import axios from 'axios';
import { useAuth } from '../context/AuthContext';


function ReviewForm() {
  const [rating, setRating] = useState(0);
  const [review, setReview] = useState('');
  const [restaurant, setRestaurant] = useState(null);
  const [submitted, setSubmitted] = useState(false);
  const [coupon, setCoupon] = useState(null);
  const { restaurantId } = useParams();

  useEffect(() => {
    const fetchRestaurant = async () => {
      try {
        const response = await axios.get(`/api/restaurants/${restaurantId}`);
        setRestaurant(response.data);
      } catch (error) {
        console.error('Error fetching restaurant:', error);
      }
    };
    fetchRestaurant();
  }, [restaurantId]);

  const handleSubmit = async (e) => {
    e.preventDefault();
    try {
      const response = await axios.post('/api/reviews', { restaurantId, rating, review });
      const couponResponse = await axios.post('/api/coupons/generate', { userId: 'user-id' }); // Replace with actual user ID
      setSubmitted(true);
      setCoupon(couponResponse.data);
    } catch (error) {
      console.error('Error submitting review:', error);
    }
  };

  if (submitted) {
    return (
      <div className="review-submitted">
        <h2>Thank you for your review!</h2>
        {coupon && (
          <div className="coupon">
            <h3>Your Coupon</h3>
            <p>Code: {coupon.code}</p>
            <p>Discount: {coupon.discount}%</p>
            <p>Valid until: {new Date(coupon.expiresAt).toLocaleDateString()}</p>
          </div>
        )}
      </div>
    );
  }

  return (
    <div className="review-form">
      <h2>Review {restaurant?.name}</h2>
      <form onSubmit={handleSubmit}>
        <div className="rating">
          {[1, 2, 3, 4, 5].map((star) => (
            <span
              key={star}
              onClick={() => setRating(star)}
              style={{ cursor: 'pointer', color: star <= rating ? 'gold' : 'gray' }}
            >
              ★
            </span>
          ))}
        </div>
        <textarea
          value={review}
          onChange={(e) => setReview(e.target.value)}
          placeholder="Write your review here..."
          required
        />
        <button type="submit">Submit Review</button>
      </form>
    </div>
  );
}

export default ReviewForm;

================
File: restaurant-review-frontend/src/components/ReviewList.js
================
// src/components/ReviewList.js
import React, { useState, useEffect } from 'react';
import api from '../utils/api';

function ReviewList({ restaurantId }) {
  const [reviews, setReviews] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);

  useEffect(() => {
    const fetchReviews = async () => {
      try {
        setLoading(true);
        const response = await api.get(`/reviews/restaurant/${restaurantId}`);
        setReviews(response.data);
        setLoading(false);
      } catch (err) {
        setError('Failed to fetch reviews. Please try again later.');
        setLoading(false);
        console.error('Error fetching reviews:', err);
      }
    };

    fetchReviews();
  }, [restaurantId]);

  if (loading) return <div>Loading reviews...</div>;
  if (error) return <div>{error}</div>;

  return (
    <div className="review-list">
      <h3>Customer Reviews</h3>
      {reviews.length === 0 ? (
        <p>No reviews yet. Be the first to review!</p>
      ) : (
        reviews.map(review => (
          <div key={review._id} className="review">
            <p>Rating: {review.rating}/5</p>
            <p>{review.text}</p>
            <p>Sentiment: {review.sentiment > 0 ? 'Positive' : review.sentiment < 0 ? 'Negative' : 'Neutral'}</p>
            <small>Date: {new Date(review.createdAt).toLocaleDateString()}</small>
          </div>
        ))
      )}
    </div>
  );
}

export default ReviewList;

================
File: restaurant-review-frontend/src/context/AuthContext.js
================
import React, { createContext, useState, useContext } from 'react';

const AuthContext = createContext();

export const useAuth = () => useContext(AuthContext);

export const AuthProvider = ({ children }) => {
  const [user, setUser] = useState(null);

  const login = (userData) => {
    setUser(userData);
  };

  const logout = () => {
    setUser(null);
  };

  return (
    <AuthContext.Provider value={{ user, login, logout }}>
      {children}
    </AuthContext.Provider>
  );
};

================
File: restaurant-review-frontend/src/App.js
================
import React from 'react';
import { BrowserRouter as Router, Route, Routes } from 'react-router-dom';
import { AuthProvider } from './context/AuthContext';
import QRScanner from './components/QRScanner';
import ReviewForm from './components/ReviewForm';
import RestaurantDashboard from './components/RestaurantDashboard';
import CouponSystem from './components/CouponSystem';
import Header from './components/Header';
import Footer from './components/Footer';

function App() {
  return (
    <AuthProvider>
      <Router>
        <div className="App">
          <Header />
          <Routes>
            <Route path="/" element={<QRScanner />} />
            <Route path="/review/:restaurantId" element={<ReviewForm />} />
            <Route path="/dashboard/:restaurantId" element={<RestaurantDashboard />} />
            <Route path="/coupons" element={<CouponSystem />} />
          </Routes>
          <Footer />
        </div>
      </Router>
    </AuthProvider>
  );
}

export default App;

================
File: restaurant-review-frontend/src/index.js
================
import React from 'react';
import ReactDOM from 'react-dom/client';
import App from './App';

const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(
  <React.StrictMode>
    <App />
  </React.StrictMode>
);

================
File: restaurant-review-frontend/package.json
================
{
    "name": "restaurant-review-frontend",
    "version": "1.0.0",
    "private": true,
    "dependencies": {
        "axios": "^1.6.7",
        "qrcode.react": "^3.1.0",
        "react": "^18.2.0",
        "react-dom": "^18.2.0",
        "react-qr-code": "^2.0.12",
        "react-router-dom": "^6.26.1",
        "react-scripts": "^5.0.1",
        "react-webcam": "^7.2.0"
    },
    "scripts": {
        "start": "react-scripts start",
        "build": "react-scripts build",
        "test": "react-scripts test",
        "eject": "react-scripts eject"
    },
    "eslintConfig": {
        "extends": [
            "react-app",
            "react-app/jest"
        ]
    },
    "browserslist": {
        "production": [
            ">0.2%",
            "not dead",
            "not op_mini all"
        ],
        "development": [
            "last 1 chrome version",
            "last 1 firefox version",
            "last 1 safari version"
        ]
    }
}

================
File: .gitignore
================
.wasp/
*node_modules/
*package-lock.json

# Ignore all dotenv files by default to prevent accidentally committing any secrets.
# To include specific dotenv files, use the `!` operator or adjust these rules.
.env
.env.*

# Don't ignore example dotenv files.
!.env.example
!.env.*.example

================
File: package.json
================
{
  "dependencies": {
    "apos-to-lex-form": "^1.0.5",
    "natural": "^8.0.1",
    "qrcode.react": "^3.1.0",
    "react-qr-reader": "^3.0.0-beta-1",
    "react-router-dom": "^6.26.1",
    "spelling-corrector": "^3.0.0",
    "stopword": "^3.1.1"
  },
  "devDependencies": {
    "minimist": "^1.2.8",
    "ms": "^2.1.3"
  }
}
