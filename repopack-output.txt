This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repopack on: 2024-09-13T20:57:18.643Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Repository structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repopack's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

For more information about Repopack, visit: https://github.com/yamadashy/repopack

================================================================
Repository Structure
================================================================
pages/
  api/
    reviews.js
  _app.js
  index.js
styles/
  globals.css
survey/
  ReviewForm.jsx
.gitignore
next.config.js
package.json
postcss.config.js
schema.prisma
tailwind.config.js

================================================================
Repository Files
================================================================

================
File: pages/api/reviews.js
================
import { PrismaClient } from '@prisma/client'

const prisma = new PrismaClient()

export default async function handler(req, res) {
  if (req.method === 'POST') {
    const { foodRating, serviceRating, ambienceRating, comments } = req.body;
    
    try {
      // Validate input
      if (!foodRating || !serviceRating || !ambienceRating) {
        return res.status(400).json({ message: 'Missing required fields' });
      }
      
      if (![foodRating, serviceRating, ambienceRating].every(rating => rating >= 1 && rating <= 5)) {
        return res.status(400).json({ message: 'Ratings must be between 1 and 5' });
      }

      if (comments && comments.length > 500) {
        return res.status(400).json({ message: 'Comments must be less than 500 characters' });
      }

      const review = await prisma.review.create({
        data: {
          foodRating: parseInt(foodRating),
          serviceRating: parseInt(serviceRating),
          ambienceRating: parseInt(ambienceRating),
          comments: comments || null
        },
      });
      res.status(201).json(review);
    } catch (error) {
      console.error('Error submitting review:', error);
      res.status(500).json({ message: 'Unable to submit review. Please try again later.' });
    }
  } else {
    res.setHeader('Allow', ['POST']);
    res.status(405).json({ message: `Method ${req.method} Not Allowed` });
  }
}

================
File: pages/_app.js
================
import '../styles/globals.css'

function MyApp({ Component, pageProps }) {
  return <Component {...pageProps} />
}

export default MyApp

================
File: pages/index.js
================
import React from 'react';
import ReviewForm from '../survey/ReviewForm';

const Home = () => {
  return (
    <div className="container mx-auto px-4 py-8">
      <h1 className="text-2xl font-bold mb-4">Submit a Review</h1>
      <ReviewForm />
    </div>
  );
};

export default Home;

================
File: styles/globals.css
================
@tailwind base;
@tailwind components;
@tailwind utilities;

================
File: survey/ReviewForm.jsx
================
import React, { useState } from 'react';
import { useForm } from 'react-hook-form';



const ReviewForm = () => {
  const [submitStatus, setSubmitStatus] = useState(null);
  const { register, handleSubmit, formState: { errors }, reset } = useForm();

  const onSubmit = async (data) => {
    try {
      const response = await fetch('/api/reviews', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(data),
      });
      if (response.ok) {
        setSubmitStatus('success');
        reset();
      } else {
        const errorData = await response.json();
        setSubmitStatus(`error:${errorData.message}`);
      }
    } catch (error) {
      console.error('Error submitting review:', error);
      setSubmitStatus('error:network');
    }
  };

  return (
    <div className="max-w-2xl mx-auto p-4">
      <h1 className="text-3xl font-bold mb-6 text-center">Submit a Review</h1>
      <form onSubmit={handleSubmit(onSubmit)} className="space-y-4">
        {['food', 'service', 'ambience'].map((category) => (
          <div key={category}>
            <label className="block text-sm font-medium text-gray-700 mb-1 capitalize">
              {category} Rating
            </label>
            <input
              type="number"
              {...register(`${category}Rating`, { 
                required: `Please rate the ${category}`,
                min: { value: 1, message: 'Rating must be at least 1' },
                max: { value: 5, message: 'Rating must be at most 5' }
              })}
              className="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
            />
            {errors[`${category}Rating`] && (
              <p className="mt-1 text-sm text-red-600">{errors[`${category}Rating`].message}</p>
            )}
          </div>
        ))}

        <div>
          <label className="block text-sm font-medium text-gray-700 mb-1">Comments</label>
          <textarea
            {...register('comments', { maxLength: { value: 500, message: 'Comments must be less than 500 characters' } })}
            className="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
            rows="4"
          ></textarea>
          {errors.comments && <p className="mt-1 text-sm text-red-600">{errors.comments.message}</p>}
        </div>

        <button 
          type="submit" 
          className="w-full py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
        >
          Submit Review
        </button>
      </form>

      {submitStatus && (
        <div className={`mt-4 p-2 rounded-md ${submitStatus.startsWith('error') ? 'bg-red-100 text-red-700' : 'bg-green-100 text-green-700'}`}>
          {submitStatus === 'success' 
            ? 'Review submitted successfully!' 
            : submitStatus.startsWith('error')
              ? `Error: ${submitStatus.split(':')[1]}`
              : submitStatus}
        </div>
      )}
    </div>
  );
};

export default ReviewForm;

================
File: .gitignore
================
node_modules/

.env
.next/
migrations/

================
File: next.config.js
================
module.exports = {
    reactStrictMode: true,
  }

================
File: package.json
================
{
    "dependencies": {
        "@prisma/client": "^5.0.0",
        "next": "^14.2.11",
        "react": "^18.2.0",
        "react-dom": "^18.2.0",
        "react-hook-form": "^7.45.4"
    },
    "devDependencies": {
        "autoprefixer": "^10.4.20",
        "postcss": "^8.4.45",
        "postcss-loader": "^8.1.1",
        "prisma": "^5.0.0",
        "tailwindcss": "^3.4.11"
    },
    "scripts": {
        "dev": "next dev",
        "build": "next build",
        "start": "next start",
        "lint": "next lint"
    }
}

================
File: postcss.config.js
================
module.exports = {
    plugins: {
      tailwindcss: {},
      autoprefixer: {},
    },
  }

================
File: schema.prisma
================
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Review {
  id             Int      @id @default(autoincrement())
  foodRating     Int
  serviceRating  Int
  ambienceRating Int
  comments       String?
  createdAt      DateTime @default(now())
}

================
File: tailwind.config.js
================
module.exports = {
    content: [
      "./pages/**/*.{js,ts,jsx,tsx,mdx}",
      "./components/**/*.{js,ts,jsx,tsx,mdx}",
      "./app/**/*.{js,ts,jsx,tsx,mdx}",
    ],
    theme: {
      extend: {},
    },
    plugins: [],
  }
