================================================================
Repopack Output File
================================================================

This file was generated by Repopack on: 2024-08-24T15:40:21.353Z

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This header section
2. Repository structure
3. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
1. This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
2. When processing this file, use the separators and "File:" markers to
  distinguish between different files in the repository.
3. Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repopack's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.



For more information about Repopack, visit: https://github.com/yamadashy/repopack

================================================================
Repository Structure
================================================================
restaurant-review-backend/
  config/
    database.js
  middleware/
    auth.js
  models/
    Coupon.js
    Restaurant.js
    Review.js
    User.js
  routes/
    coupons.js
    restaurants.js
    reviews.js
    users.js
  utils/
    qrCodeGenerator.js
    sentimentAnalysis.js
  package.json
  server.js
restaurant-review-frontend/
  build/
    static/
      css/
        main.6829d6d5.css
        main.6829d6d5.css.map
    asset-manifest.json
    index.html
  public/
    index.html
  src/
    components/
      CouponList.js
      CouponPage.js
      CouponSystem.js
      Dashboard.js
      Footer.js
      Header.js
      Layout.js
      Login.js
      PrivateRoute.js
      ProfileEditor.js
      QRCodeGenerator.js
      QRscanner.js
      Register.js
      RestaurantCard.js
      RestaurantDashboard.js
      RestaurantList.js
      RestaurantRegister.js
      ReviewForm.js
      ReviewList.js
      UserTypeToggle.js
    context/
      AuthContext.js
    utils/
      api.js
    App.js
    index.css
    index.js
  package.json
  postcss.config.js
  repopack-output.txt
  tailwind.config.js
.gitignore
package.json
postcss.config.js
README.md
tailwind.config.js

================================================================
Repository Files
================================================================

================
File: restaurant-review-backend/config/database.js
================
// config/database.js
const mongoose = require('mongoose');

const connectDB = async () => {
  try {
    await mongoose.connect(process.env.MONGODB_URI, {
      useNewUrlParser: true,
      useUnifiedTopology: true,
    });
    console.log('MongoDB connected');
  } catch (err) {
    console.error('MongoDB connection error:', err);
    process.exit(1);
  }
};

module.exports = connectDB;

================
File: restaurant-review-backend/middleware/auth.js
================
// middleware/auth.js
const jwt = require('jsonwebtoken');

module.exports = function(req, res, next) {
  const token = req.header('x-auth-token');
  if (!token) return res.status(401).json({ msg: 'No token, authorization denied' });

  try {
    const decoded = jwt.verify(token, process.env.JWT_SECRET);
    req.user = decoded.user;
    next();
  } catch (err) {
    res.status(401).json({ msg: 'Token is not valid' });
  }
};

================
File: restaurant-review-backend/models/Coupon.js
================
// models/Coupon.js
const mongoose = require('mongoose');

const CouponSchema = new mongoose.Schema({
  code: { type: String, required: true, unique: true },
  discount: { type: Number, required: true },
  expiresAt: { type: Date, required: true },
  isUsed: { type: Boolean, default: false },
  userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
  createdAt: { type: Date, default: Date.now },
});

module.exports = mongoose.model('Coupon', CouponSchema);

================
File: restaurant-review-backend/models/Restaurant.js
================
// models/Review.js
const mongoose = require('mongoose');

const ReviewSchema = new mongoose.Schema({
  restaurantId: { type: mongoose.Schema.Types.ObjectId, ref: 'Restaurant', required: true },
  userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
  rating: { type: Number, required: true, min: 1, max: 5 },
  text: { type: String, required: true },
  sentiment: { type: Number, required: true },
  createdAt: { type: Date, default: Date.now },
});

ReviewSchema.post('save', async function() {
  const Restaurant = mongoose.model('Restaurant');
  const restaurant = await Restaurant.findById(this.restaurantId);
  
  restaurant.reviewCount += 1;
  restaurant.averageRating = (restaurant.averageRating * (restaurant.reviewCount - 1) + this.rating) / restaurant.reviewCount;
  
  await restaurant.save();
});

module.exports = mongoose.model('Review', ReviewSchema);

================
File: restaurant-review-backend/models/Review.js
================
// models/Review.js
const mongoose = require('mongoose');

const ReviewSchema = new mongoose.Schema({
  restaurantId: { type: mongoose.Schema.Types.ObjectId, ref: 'Restaurant', required: true },
  userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
  rating: { type: Number, required: true, min: 1, max: 5 },
  text: { type: String, required: true },
  sentiment: { type: Number, required: true },
  createdAt: { type: Date, default: Date.now },
});

module.exports = mongoose.models.Review || mongoose.model('Review', ReviewSchema);

================
File: restaurant-review-backend/models/User.js
================
// models/User.js
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');


const UserSchema = new mongoose.Schema({
    username: { type: String, required: true, unique: true },
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
    role: { type: String, enum: ['user', 'restaurant'], default: 'user' },
    restaurantInfo: {
      name: String,
      address: String,
      cuisine: String
    }
  });

UserSchema.pre('save', async function(next) {
  if (!this.isModified('password')) return next();
  this.password = await bcrypt.hash(this.password, 10);
  next();
});

UserSchema.methods.comparePassword = async function(candidatePassword) {
  return bcrypt.compare(candidatePassword, this.password);
};

module.exports = mongoose.model('User', UserSchema);

================
File: restaurant-review-backend/routes/coupons.js
================
// routes/coupons.js
const express = require('express');
const router = express.Router();
const Coupon = require('../models/Coupon');
const auth = require('../middleware/auth');

// Generate a new coupon
router.post('/generate', auth, async (req, res) => {
  const coupon = new Coupon({
    code: Math.random().toString(36).substring(7),
    discount: 10, // 10% discount
    expiresAt: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000), // 30 days from now
    userId: req.user.id
  });

  try {
    const newCoupon = await coupon.save();
    res.status(201).json(newCoupon);
  } catch (error) {
    res.status(400).json({ message: error.message });
  }
});

// Get all coupons for a user
router.get('/user', auth, async (req, res) => {
  try {
    const coupons = await Coupon.find({ userId: req.user.id, isUsed: false });
    res.json(coupons);
  } catch (error) {
    res.status(500).json({ message: error.message });
  }
});

// Redeem a coupon
router.post('/redeem', auth, async (req, res) => {
  try {
    const coupon = await Coupon.findOne({ code: req.body.code, isUsed: false });
    if (!coupon) {
      return res.status(404).json({ message: 'Invalid or already used coupon' });
    }

    if (coupon.expiresAt < Date.now()) {
      return res.status(400).json({ message: 'Coupon has expired' });
    }

    coupon.isUsed = true;
    await coupon.save();

    res.json({ message: 'Coupon redeemed successfully', discount: coupon.discount });
  } catch (error) {
    res.status(500).json({ message: error.message });
  }
});

module.exports = router;

================
File: restaurant-review-backend/routes/restaurants.js
================
// routes/restaurants.js
const express = require('express');
const router = express.Router();
const Restaurant = require('../models/Restaurant');
const auth = require('../middleware/auth');
const generateQRCode = require('../utils/qrCodeGenerator');

// Get all restaurants
router.get('/', async (req, res) => {
  try {
    const restaurants = await Restaurant.find();
    res.json(restaurants);
  } catch (error) {
    res.status(500).json({ message: error.message });
  }
});

// Get a specific restaurant
router.get('/:id', async (req, res) => {
  try {
    const restaurant = await Restaurant.findById(req.params.id);
    if (!restaurant) return res.status(404).json({ message: 'Restaurant not found' });
    res.json(restaurant);
  } catch (error) {
    res.status(500).json({ message: error.message });
  }
});

// Create a new restaurant (protected route)
router.post('/', auth, async (req, res) => {
  const restaurant = new Restaurant({
    name: req.body.name,
    address: req.body.address,
  });

  try {
    const newRestaurant = await restaurant.save();
    
    // Generate QR code
    const qrCodeData = `http://yourfrontend.com/review/${newRestaurant._id}`;
    const qrCodeImage = await generateQRCode(qrCodeData);
    
    // Update restaurant with QR code
    newRestaurant.qrCode = qrCodeImage;
    await newRestaurant.save();

    res.status(201).json(newRestaurant);
  } catch (error) {
    res.status(400).json({ message: error.message });
  }
});

// Update a restaurant (protected route)
router.patch('/:id', auth, async (req, res) => {
  try {
    const restaurant = await Restaurant.findById(req.params.id);
    if (!restaurant) return res.status(404).json({ message: 'Restaurant not found' });

    if (req.body.name) restaurant.name = req.body.name;
    if (req.body.address) restaurant.address = req.body.address;

    const updatedRestaurant = await restaurant.save();
    res.json(updatedRestaurant);
  } catch (error) {
    res.status(400).json({ message: error.message });
  }
});

// Delete a restaurant (protected route)
router.delete('/:id', auth, async (req, res) => {
  try {
    const restaurant = await Restaurant.findById(req.params.id);
    if (!restaurant) return res.status(404).json({ message: 'Restaurant not found' });

    await restaurant.remove();
    res.json({ message: 'Restaurant deleted successfully' });
  } catch (error) {
    res.status(500).json({ message: error.message });
  }
});

// Generate new QR code for a restaurant (protected route)
router.post('/:id/generate-qr', auth, async (req, res) => {
  try {
    const restaurant = await Restaurant.findById(req.params.id);
    if (!restaurant) return res.status(404).json({ message: 'Restaurant not found' });

    const qrCodeData = `http://yourfrontend.com/review/${restaurant._id}`;
    const qrCodeImage = await generateQRCode(qrCodeData);

    restaurant.qrCode = qrCodeImage;
    await restaurant.save();

    res.json({ message: 'QR code generated successfully', qrCode: qrCodeImage });
  } catch (error) {
    res.status(500).json({ message: error.message });
  }
});

module.exports = router;

================
File: restaurant-review-backend/routes/reviews.js
================
// routes/reviews.js
const express = require('express');
const router = express.Router();
const Review = require('../models/Review');
const Restaurant = require('../models/Restaurant');
const auth = require('../middleware/auth');
const analyzeSentiment = require('../utils/sentimentAnalysis');

// Get all reviews for a restaurant
router.get('/restaurant/:restaurantId', async (req, res) => {
  try {
    const reviews = await Review.find({ restaurantId: req.params.restaurantId });
    res.json(reviews);
  } catch (error) {
    res.status(500).json({ message: error.message });
  }
});

// Create a new review
router.post('/', auth, async (req, res) => {
  const { restaurantId, rating, text } = req.body;
  const sentiment = analyzeSentiment(text);

  const review = new Review({
    restaurantId,
    userId: req.user.id,
    rating,
    text,
    sentiment
  });

  try {
    const newReview = await review.save();
    res.status(201).json(newReview);
  } catch (error) {
    res.status(400).json({ message: error.message });
  }
});

// Get review summary for a restaurant
router.get('/summary/:restaurantId', async (req, res) => {
  try {
    const reviews = await Review.find({ restaurantId: req.params.restaurantId });
    const restaurant = await Restaurant.findById(req.params.restaurantId);

    const summary = {
      averageRating: restaurant.averageRating,
      totalReviews: restaurant.reviewCount,
      sentimentBreakdown: {
        positive: reviews.filter(r => r.sentiment > 0).length,
        neutral: reviews.filter(r => r.sentiment === 0).length,
        negative: reviews.filter(r => r.sentiment < 0).length
      }
    };

    res.json(summary);
  } catch (error) {
    res.status(500).json({ message: error.message });
  }
});

module.exports = router;

================
File: restaurant-review-backend/routes/users.js
================
// routes/users.js
const express = require('express');
const router = express.Router();
const bcrypt = require('bcryptjs');
const jwt = require('jsonwebtoken');
const User = require('../models/User');
const auth = require('../middleware/auth');

// Register a new user
// routes/users.js
router.post('/register', async (req, res) => {
    try {
      const { username, email, password, role, restaurantInfo } = req.body;
      
      let user = await User.findOne({ email });
      if (user) {
        return res.status(400).json({ msg: 'User already exists' });
      }
  
      user = new User({ 
        username, 
        email, 
        password,
        role: role || 'user',
        restaurantInfo: role === 'restaurant' ? restaurantInfo : undefined
      });
  
      const salt = await bcrypt.genSalt(10);
      user.password = await bcrypt.hash(password, salt);
  
      await user.save();
  
      const payload = {
        user: {
          id: user.id,
          role: user.role
        }
      };
  
      jwt.sign(payload, process.env.JWT_SECRET, { expiresIn: '1h' }, (err, token) => {
        if (err) throw err;
        res.json({ token, role: user.role });
      });
    } catch (err) {
      console.error(err.message);
      res.status(500).send('Server error');
    }
  });

// Login user// routes/users.js
router.post('/login', async (req, res) => {
    try {
      const { email, password } = req.body;
      let user = await User.findOne({ email });
      if (!user) {
        return res.status(400).json({ msg: 'Invalid credentials' });
      }
  
      const isMatch = await bcrypt.compare(password, user.password);
      if (!isMatch) {
        return res.status(400).json({ msg: 'Invalid credentials' });
      }
  
      const payload = {
        user: {
          id: user.id,
          role: user.role
        }
      };
  
      jwt.sign(payload, process.env.JWT_SECRET, { expiresIn: '1h' }, (err, token) => {
        if (err) throw err;
        res.json({ token, role: user.role });
      });
    } catch (err) {
      console.error(err.message);
      res.status(500).send('Server error');
    }
  });

// Get user profile
router.get('/profile', auth, async (req, res) => {
  try {
    const user = await User.findById(req.user.id).select('-password');
    res.json(user);
  } catch (err) {
    console.error(err.message);
    res.status(500).send('Server error');
  }
});

module.exports = router;

================
File: restaurant-review-backend/utils/qrCodeGenerator.js
================
// utils/qrCodeGenerator.js
const qr = require('qrcode');

async function generateQRCode(data) {
  try {
    return await qr.toDataURL(data);
  } catch (err) {
    console.error('Error generating QR code:', err);
    throw err;
  }
}

module.exports = generateQRCode;

================
File: restaurant-review-backend/utils/sentimentAnalysis.js
================
// utils/sentimentAnalysis.js
const natural = require('natural');

const analyzer = new natural.SentimentAnalyzer('English', natural.PorterStemmer, 'afinn');

function analyzeSentiment(text) {
  const tokens = new natural.WordTokenizer().tokenize(text);
  return analyzer.getSentiment(tokens);
}

module.exports = analyzeSentiment;

================
File: restaurant-review-backend/package.json
================
{
  "name": "restaurant-review-backend",
  "version": "1.0.0",
  "description": "Backend for restaurant review application",
  "main": "server.js",
  "scripts": {
    "start": "node server.js",
    "dev": "nodemon server.js"
  },
  "keywords": [],
  "author": "",
  "license": "ISC",
  "dependencies": {
    "bcryptjs": "^2.4.3",
    "cors": "^2.8.5",
    "dotenv": "^16.4.5",
    "express": "^4.19.2",
    "jsonwebtoken": "^9.0.0",
    "mongoose": "^8.5.3",
    "natural": "^8.0.1",
    "qrcode": "^1.5.4"
  },
  "devDependencies": {
    "nodemon": "^3.1.4"
  }
}

================
File: restaurant-review-backend/server.js
================
// server.js
const express = require('express');
const cors = require('cors');
require('dotenv').config();
const connectDB = require('./config/database');

const app = express();
const PORT = process.env.PORT || 5001;

app.use(cors());
app.use(express.json());

// Connect to database
connectDB();

// Import routes
const restaurantRoutes = require('./routes/restaurants');
const reviewRoutes = require('./routes/reviews');
const couponRoutes = require('./routes/coupons');
const userRoutes = require('./routes/users');

// Use routes
app.use('/api/restaurants', restaurantRoutes);
app.use('/api/reviews', reviewRoutes);
app.use('/api/coupons', couponRoutes);
app.use('/api/users', userRoutes);

app.listen(PORT, () => console.log(`Server running on port ${PORT}`));

================
File: restaurant-review-frontend/build/static/css/main.6829d6d5.css
================
/*
! tailwindcss v3.4.10 | MIT License | https://tailwindcss.com
*/*,:after,:before{border:0 solid #e5e7eb;box-sizing:border-box}:after,:before{--tw-content:""}:host,html{-webkit-text-size-adjust:100%;font-feature-settings:normal;-webkit-tap-highlight-color:transparent;font-family:ui-sans-serif,system-ui,sans-serif,Apple Color Emoji,Segoe UI Emoji,Segoe UI Symbol,Noto Color Emoji;font-variation-settings:normal;line-height:1.5;tab-size:4}body{line-height:inherit;margin:0}hr{border-top-width:1px;color:inherit;height:0}abbr:where([title]){-webkit-text-decoration:underline dotted;text-decoration:underline dotted}h1,h2,h3,h4,h5,h6{font-size:inherit;font-weight:inherit}a{color:inherit;text-decoration:inherit}b,strong{font-weight:bolder}code,kbd,pre,samp{font-feature-settings:normal;font-family:ui-monospace,SFMono-Regular,Menlo,Monaco,Consolas,Liberation Mono,Courier New,monospace;font-size:1em;font-variation-settings:normal}small{font-size:80%}sub,sup{font-size:75%;line-height:0;position:relative;vertical-align:initial}sub{bottom:-.25em}sup{top:-.5em}table{border-collapse:collapse;border-color:inherit;text-indent:0}button,input,optgroup,select,textarea{font-feature-settings:inherit;color:inherit;font-family:inherit;font-size:100%;font-variation-settings:inherit;font-weight:inherit;letter-spacing:inherit;line-height:inherit;margin:0;padding:0}button,select{text-transform:none}button,input:where([type=button]),input:where([type=reset]),input:where([type=submit]){-webkit-appearance:button;background-color:initial;background-image:none}:-moz-focusring{outline:auto}:-moz-ui-invalid{box-shadow:none}progress{vertical-align:initial}::-webkit-inner-spin-button,::-webkit-outer-spin-button{height:auto}[type=search]{-webkit-appearance:textfield;outline-offset:-2px}::-webkit-search-decoration{-webkit-appearance:none}::-webkit-file-upload-button{-webkit-appearance:button;font:inherit}summary{display:list-item}blockquote,dd,dl,figure,h1,h2,h3,h4,h5,h6,hr,p,pre{margin:0}fieldset{margin:0}fieldset,legend{padding:0}menu,ol,ul{list-style:none;margin:0;padding:0}dialog{padding:0}textarea{resize:vertical}input::placeholder,textarea::placeholder{color:#9ca3af;opacity:1}[role=button],button{cursor:pointer}:disabled{cursor:default}audio,canvas,embed,iframe,img,object,svg,video{display:block;vertical-align:middle}img,video{height:auto;max-width:100%}[hidden]{display:none}*,::backdrop,:after,:before{--tw-border-spacing-x:0;--tw-border-spacing-y:0;--tw-translate-x:0;--tw-translate-y:0;--tw-rotate:0;--tw-skew-x:0;--tw-skew-y:0;--tw-scale-x:1;--tw-scale-y:1;--tw-pan-x: ;--tw-pan-y: ;--tw-pinch-zoom: ;--tw-scroll-snap-strictness:proximity;--tw-gradient-from-position: ;--tw-gradient-via-position: ;--tw-gradient-to-position: ;--tw-ordinal: ;--tw-slashed-zero: ;--tw-numeric-figure: ;--tw-numeric-spacing: ;--tw-numeric-fraction: ;--tw-ring-inset: ;--tw-ring-offset-width:0px;--tw-ring-offset-color:#fff;--tw-ring-color:#3b82f680;--tw-ring-offset-shadow:0 0 #0000;--tw-ring-shadow:0 0 #0000;--tw-shadow:0 0 #0000;--tw-shadow-colored:0 0 #0000;--tw-blur: ;--tw-brightness: ;--tw-contrast: ;--tw-grayscale: ;--tw-hue-rotate: ;--tw-invert: ;--tw-saturate: ;--tw-sepia: ;--tw-drop-shadow: ;--tw-backdrop-blur: ;--tw-backdrop-brightness: ;--tw-backdrop-contrast: ;--tw-backdrop-grayscale: ;--tw-backdrop-hue-rotate: ;--tw-backdrop-invert: ;--tw-backdrop-opacity: ;--tw-backdrop-saturate: ;--tw-backdrop-sepia: ;--tw-contain-size: ;--tw-contain-layout: ;--tw-contain-paint: ;--tw-contain-style: }.container{width:100%}@media (min-width:640px){.container{max-width:640px}}@media (min-width:768px){.container{max-width:768px}}@media (min-width:1024px){.container{max-width:1024px}}@media (min-width:1280px){.container{max-width:1280px}}@media (min-width:1536px){.container{max-width:1536px}}.mx-auto{margin-left:auto;margin-right:auto}.mb-1{margin-bottom:.25rem}.mb-2{margin-bottom:.5rem}.mb-3{margin-bottom:.75rem}.mb-4{margin-bottom:1rem}.mb-6{margin-bottom:1.5rem}.mb-8{margin-bottom:2rem}.mt-1{margin-top:.25rem}.mt-2{margin-top:.5rem}.mt-4{margin-top:1rem}.mt-8{margin-top:2rem}.block{display:block}.flex{display:flex}.grid{display:grid}.min-h-screen{min-height:100vh}.w-full{width:100%}.max-w-2xl{max-width:42rem}.max-w-md{max-width:28rem}.flex-grow{flex-grow:1}.list-disc{list-style-type:disc}.appearance-none{-webkit-appearance:none;appearance:none}.grid-cols-1{grid-template-columns:repeat(1,minmax(0,1fr))}.flex-col{flex-direction:column}.items-center{align-items:center}.justify-center{justify-content:center}.justify-between{justify-content:space-between}.gap-4{gap:1rem}.space-x-2>:not([hidden])~:not([hidden]){--tw-space-x-reverse:0;margin-left:calc(.5rem*(1 - var(--tw-space-x-reverse)));margin-right:calc(.5rem*var(--tw-space-x-reverse))}.space-x-4>:not([hidden])~:not([hidden]){--tw-space-x-reverse:0;margin-left:calc(1rem*(1 - var(--tw-space-x-reverse)));margin-right:calc(1rem*var(--tw-space-x-reverse))}.space-y-2>:not([hidden])~:not([hidden]){--tw-space-y-reverse:0;margin-bottom:calc(.5rem*var(--tw-space-y-reverse));margin-top:calc(.5rem*(1 - var(--tw-space-y-reverse)))}.space-y-4>:not([hidden])~:not([hidden]){--tw-space-y-reverse:0;margin-bottom:calc(1rem*var(--tw-space-y-reverse));margin-top:calc(1rem*(1 - var(--tw-space-y-reverse)))}.space-y-6>:not([hidden])~:not([hidden]){--tw-space-y-reverse:0;margin-bottom:calc(1.5rem*var(--tw-space-y-reverse));margin-top:calc(1.5rem*(1 - var(--tw-space-y-reverse)))}.rounded{border-radius:.25rem}.rounded-lg{border-radius:.5rem}.rounded-md{border-radius:.375rem}.border{border-width:1px}.border-b{border-bottom-width:1px}.border-gray-300{--tw-border-opacity:1;border-color:rgb(209 213 219/var(--tw-border-opacity))}.bg-blue-500{--tw-bg-opacity:1;background-color:rgb(59 130 246/var(--tw-bg-opacity))}.bg-blue-600{--tw-bg-opacity:1;background-color:rgb(37 99 235/var(--tw-bg-opacity))}.bg-gray-100{--tw-bg-opacity:1;background-color:rgb(243 244 246/var(--tw-bg-opacity))}.bg-gray-800{--tw-bg-opacity:1;background-color:rgb(31 41 55/var(--tw-bg-opacity))}.bg-green-500{--tw-bg-opacity:1;background-color:rgb(34 197 94/var(--tw-bg-opacity))}.bg-white{--tw-bg-opacity:1;background-color:rgb(255 255 255/var(--tw-bg-opacity))}.p-4{padding:1rem}.p-6{padding:1.5rem}.p-8{padding:2rem}.px-3{padding-left:.75rem;padding-right:.75rem}.px-4{padding-left:1rem;padding-right:1rem}.px-8{padding-left:2rem;padding-right:2rem}.py-2{padding-bottom:.5rem;padding-top:.5rem}.py-4{padding-bottom:1rem;padding-top:1rem}.py-8{padding-bottom:2rem;padding-top:2rem}.pb-4{padding-bottom:1rem}.pb-8{padding-bottom:2rem}.pl-5{padding-left:1.25rem}.pt-6{padding-top:1.5rem}.text-center{text-align:center}.text-2xl{font-size:1.5rem;line-height:2rem}.text-3xl{font-size:1.875rem;line-height:2.25rem}.text-4xl{font-size:2.25rem;line-height:2.5rem}.text-sm{font-size:.875rem;line-height:1.25rem}.text-xl{font-size:1.25rem;line-height:1.75rem}.text-xs{font-size:.75rem;line-height:1rem}.font-bold{font-weight:700}.font-medium{font-weight:500}.font-semibold{font-weight:600}.italic{font-style:italic}.leading-tight{line-height:1.25}.text-blue-500{--tw-text-opacity:1;color:rgb(59 130 246/var(--tw-text-opacity))}.text-gray-300{--tw-text-opacity:1;color:rgb(209 213 219/var(--tw-text-opacity))}.text-gray-500{--tw-text-opacity:1;color:rgb(107 114 128/var(--tw-text-opacity))}.text-gray-700{--tw-text-opacity:1;color:rgb(55 65 81/var(--tw-text-opacity))}.text-gray-800{--tw-text-opacity:1;color:rgb(31 41 55/var(--tw-text-opacity))}.text-green-500{--tw-text-opacity:1;color:rgb(34 197 94/var(--tw-text-opacity))}.text-green-600{--tw-text-opacity:1;color:rgb(22 163 74/var(--tw-text-opacity))}.text-red-500{--tw-text-opacity:1;color:rgb(239 68 68/var(--tw-text-opacity))}.text-white{--tw-text-opacity:1;color:rgb(255 255 255/var(--tw-text-opacity))}.text-yellow-400{--tw-text-opacity:1;color:rgb(250 204 21/var(--tw-text-opacity))}.text-yellow-500{--tw-text-opacity:1;color:rgb(234 179 8/var(--tw-text-opacity))}.shadow{--tw-shadow:0 1px 3px 0 #0000001a,0 1px 2px -1px #0000001a;--tw-shadow-colored:0 1px 3px 0 var(--tw-shadow-color),0 1px 2px -1px var(--tw-shadow-color)}.shadow,.shadow-md{box-shadow:0 0 #0000,0 0 #0000,var(--tw-shadow);box-shadow:var(--tw-ring-offset-shadow,0 0 #0000),var(--tw-ring-shadow,0 0 #0000),var(--tw-shadow)}.shadow-md{--tw-shadow:0 4px 6px -1px #0000001a,0 2px 4px -2px #0000001a;--tw-shadow-colored:0 4px 6px -1px var(--tw-shadow-color),0 2px 4px -2px var(--tw-shadow-color)}.shadow-sm{--tw-shadow:0 1px 2px 0 #0000000d;--tw-shadow-colored:0 1px 2px 0 var(--tw-shadow-color);box-shadow:0 0 #0000,0 0 #0000,var(--tw-shadow);box-shadow:var(--tw-ring-offset-shadow,0 0 #0000),var(--tw-ring-shadow,0 0 #0000),var(--tw-shadow)}.transition{transition-duration:.15s;transition-property:color,background-color,border-color,text-decoration-color,fill,stroke,opacity,box-shadow,transform,filter,-webkit-backdrop-filter;transition-property:color,background-color,border-color,text-decoration-color,fill,stroke,opacity,box-shadow,transform,filter,backdrop-filter;transition-property:color,background-color,border-color,text-decoration-color,fill,stroke,opacity,box-shadow,transform,filter,backdrop-filter,-webkit-backdrop-filter;transition-timing-function:cubic-bezier(.4,0,.2,1)}.duration-300{transition-duration:.3s}body{--tw-bg-opacity:1;background-color:rgb(243 244 246/var(--tw-bg-opacity))}.hover\:bg-blue-600:hover{--tw-bg-opacity:1;background-color:rgb(37 99 235/var(--tw-bg-opacity))}.hover\:bg-blue-700:hover{--tw-bg-opacity:1;background-color:rgb(29 78 216/var(--tw-bg-opacity))}.hover\:bg-green-600:hover{--tw-bg-opacity:1;background-color:rgb(22 163 74/var(--tw-bg-opacity))}.hover\:text-blue-200:hover{--tw-text-opacity:1;color:rgb(191 219 254/var(--tw-text-opacity))}.focus\:border-indigo-300:focus{--tw-border-opacity:1;border-color:rgb(165 180 252/var(--tw-border-opacity))}.focus\:outline-none:focus{outline:2px solid #0000;outline-offset:2px}.focus\:ring:focus{--tw-ring-offset-shadow:var(--tw-ring-inset) 0 0 0 var(--tw-ring-offset-width) var(--tw-ring-offset-color);--tw-ring-shadow:var(--tw-ring-inset) 0 0 0 calc(3px + var(--tw-ring-offset-width)) var(--tw-ring-color)}.focus\:ring-2:focus,.focus\:ring:focus{box-shadow:var(--tw-ring-offset-shadow),var(--tw-ring-shadow),0 0 #0000;box-shadow:var(--tw-ring-offset-shadow),var(--tw-ring-shadow),var(--tw-shadow,0 0 #0000)}.focus\:ring-2:focus{--tw-ring-offset-shadow:var(--tw-ring-inset) 0 0 0 var(--tw-ring-offset-width) var(--tw-ring-offset-color);--tw-ring-shadow:var(--tw-ring-inset) 0 0 0 calc(2px + var(--tw-ring-offset-width)) var(--tw-ring-color)}.focus\:ring-green-500:focus{--tw-ring-opacity:1;--tw-ring-color:rgb(34 197 94/var(--tw-ring-opacity))}.focus\:ring-indigo-200:focus{--tw-ring-opacity:1;--tw-ring-color:rgb(199 210 254/var(--tw-ring-opacity))}.focus\:ring-opacity-50:focus{--tw-ring-opacity:0.5}@media (min-width:768px){.md\:grid-cols-3{grid-template-columns:repeat(3,minmax(0,1fr))}}
/*# sourceMappingURL=main.6829d6d5.css.map*/

================
File: restaurant-review-frontend/build/static/css/main.6829d6d5.css.map
================
{"version":3,"file":"static/css/main.6829d6d5.css","mappings":"AAAA;;CAAc,CAAd,uCAAc,CAAd,qBAAc,CAAd,8BAAc,CAAd,wCAAc,CAAd,4BAAc,CAAd,uCAAc,CAAd,gHAAc,CAAd,8BAAc,CAAd,eAAc,CAAd,UAAc,CAAd,wBAAc,CAAd,QAAc,CAAd,uBAAc,CAAd,aAAc,CAAd,QAAc,CAAd,4DAAc,CAAd,gCAAc,CAAd,mCAAc,CAAd,mBAAc,CAAd,eAAc,CAAd,uBAAc,CAAd,2BAAc,CAAd,8CAAc,CAAd,mGAAc,CAAd,aAAc,CAAd,8BAAc,CAAd,mBAAc,CAAd,qBAAc,CAAd,aAAc,CAAd,iBAAc,CAAd,sBAAc,CAAd,iBAAc,CAAd,aAAc,CAAd,8BAAc,CAAd,oBAAc,CAAd,aAAc,CAAd,mEAAc,CAAd,aAAc,CAAd,mBAAc,CAAd,cAAc,CAAd,+BAAc,CAAd,mBAAc,CAAd,sBAAc,CAAd,mBAAc,CAAd,QAAc,CAAd,SAAc,CAAd,iCAAc,CAAd,gHAAc,CAAd,wBAAc,CAAd,qBAAc,CAAd,4BAAc,CAAd,gCAAc,CAAd,+BAAc,CAAd,mEAAc,CAAd,0CAAc,CAAd,mBAAc,CAAd,mDAAc,CAAd,sDAAc,CAAd,YAAc,CAAd,yBAAc,CAAd,2DAAc,CAAd,iBAAc,CAAd,yBAAc,CAAd,0BAAc,CAAd,QAAc,CAAd,SAAc,CAAd,gBAAc,CAAd,wBAAc,CAAd,sDAAc,CAAd,SAAc,CAAd,mCAAc,CAAd,wBAAc,CAAd,4DAAc,CAAd,qBAAc,CAAd,qBAAc,CAAd,cAAc,CAAd,qBAAc,CAAd,mDAAc,CAAd,uBAAc,CAAd,kBAAc,CAAd,kBAAc,CAAd,aAAc,CAAd,aAAc,CAAd,aAAc,CAAd,cAAc,CAAd,cAAc,CAAd,YAAc,CAAd,YAAc,CAAd,iBAAc,CAAd,qCAAc,CAAd,6BAAc,CAAd,4BAAc,CAAd,2BAAc,CAAd,cAAc,CAAd,mBAAc,CAAd,qBAAc,CAAd,sBAAc,CAAd,uBAAc,CAAd,iBAAc,CAAd,0BAAc,CAAd,2BAAc,CAAd,yBAAc,CAAd,iCAAc,CAAd,0BAAc,CAAd,qBAAc,CAAd,6BAAc,CAAd,WAAc,CAAd,iBAAc,CAAd,eAAc,CAAd,gBAAc,CAAd,iBAAc,CAAd,aAAc,CAAd,eAAc,CAAd,YAAc,CAAd,kBAAc,CAAd,oBAAc,CAAd,0BAAc,CAAd,wBAAc,CAAd,yBAAc,CAAd,0BAAc,CAAd,sBAAc,CAAd,uBAAc,CAAd,wBAAc,CAAd,qBAAc,CAAd,mBAAc,CAAd,qBAAc,CAAd,oBAAc,CAAd,oBAAc,CACd,qBAAoB,CAApB,mDAAoB,EAApB,mDAAoB,EAApB,qDAAoB,EAApB,qDAAoB,EAApB,qDAAoB,EACpB,yBAAmB,CAAnB,iBAAmB,CAAnB,0BAAmB,CAAnB,yBAAmB,CAAnB,0BAAmB,CAAnB,wBAAmB,CAAnB,0BAAmB,CAAnB,wBAAmB,CAAnB,uBAAmB,CAAnB,sBAAmB,CAAnB,qBAAmB,CAAnB,qBAAmB,CAAnB,oBAAmB,CAAnB,kBAAmB,CAAnB,kBAAmB,CAAnB,8BAAmB,CAAnB,kBAAmB,CAAnB,0BAAmB,CAAnB,yBAAmB,CAAnB,sBAAmB,CAAnB,+BAAmB,CAAnB,wCAAmB,CAAnB,eAAmB,CAAnB,0DAAmB,CAAnB,+BAAmB,CAAnB,gCAAmB,CAAnB,sCAAmB,CAAnB,8CAAmB,CAAnB,eAAmB,CAAnB,+DAAmB,CAAnB,0GAAmB,CAAnB,+DAAmB,CAAnB,wGAAmB,CAAnB,+DAAmB,CAAnB,0GAAmB,CAAnB,+DAAmB,CAAnB,wGAAmB,CAAnB,+DAAmB,CAAnB,4GAAmB,CAAnB,6BAAmB,CAAnB,+BAAmB,CAAnB,iCAAmB,CAAnB,wBAAmB,CAAnB,iCAAmB,CAAnB,sCAAmB,CAAnB,sDAAmB,CAAnB,8BAAmB,CAAnB,qDAAmB,CAAnB,8BAAmB,CAAnB,oDAAmB,CAAnB,8BAAmB,CAAnB,sDAAmB,CAAnB,8BAAmB,CAAnB,mDAAmB,CAAnB,+BAAmB,CAAnB,oDAAmB,CAAnB,2BAAmB,CAAnB,sDAAmB,CAAnB,iBAAmB,CAAnB,mBAAmB,CAAnB,iBAAmB,CAAnB,yBAAmB,CAAnB,oBAAmB,CAAnB,uBAAmB,CAAnB,kBAAmB,CAAnB,uBAAmB,CAAnB,kBAAmB,CAAnB,4CAAmB,CAAnB,0CAAmB,CAAnB,0CAAmB,CAAnB,yBAAmB,CAAnB,yBAAmB,CAAnB,0BAAmB,CAAnB,wBAAmB,CAAnB,8BAAmB,CAAnB,0BAAmB,CAAnB,gBAAmB,CAAnB,4BAAmB,CAAnB,mBAAmB,CAAnB,2BAAmB,CAAnB,kBAAmB,CAAnB,0BAAmB,CAAnB,mBAAmB,CAAnB,0BAAmB,CAAnB,mBAAmB,CAAnB,yBAAmB,CAAnB,gBAAmB,CAAnB,0BAAmB,CAAnB,4BAAmB,CAAnB,8BAAmB,CAAnB,yBAAmB,CAAnB,+BAAmB,CAAnB,kCAAmB,CAAnB,4CAAmB,CAAnB,kCAAmB,CAAnB,6CAAmB,CAAnB,kCAAmB,CAAnB,6CAAmB,CAAnB,kCAAmB,CAAnB,0CAAmB,CAAnB,kCAAmB,CAAnB,0CAAmB,CAAnB,mCAAmB,CAAnB,2CAAmB,CAAnB,mCAAmB,CAAnB,2CAAmB,CAAnB,iCAAmB,CAAnB,2CAAmB,CAAnB,+BAAmB,CAAnB,6CAAmB,CAAnB,oCAAmB,CAAnB,4CAAmB,CAAnB,oCAAmB,CAAnB,2CAAmB,CAAnB,kEAAmB,CAAnB,4FAAmB,CAAnB,kEAAmB,CAAnB,kGAAmB,CAAnB,wEAAmB,CAAnB,+FAAmB,CAAnB,4CAAmB,CAAnB,sDAAmB,CAAnB,+CAAmB,CAAnB,kGAAmB,CAAnB,0LAAmB,CAAnB,6IAAmB,CAAnB,qKAAmB,CAAnB,kDAAmB,CAAnB,qCAAmB,CAIjB,sBAAkB,CAAlB,sDAAkB,CANpB,2CAOC,CAPD,oDAOC,CAPD,2CAOC,CAPD,oDAOC,CAPD,4CAOC,CAPD,oDAOC,CAPD,+CAOC,CAPD,6CAOC,CAPD,qDAOC,CAPD,sDAOC,CAPD,kDAOC,CAPD,kBAOC,CAPD,6HAOC,CAPD,wGAOC,CAPD,+GAOC,CAPD,wFAOC,CAPD,+HAOC,CAPD,wGAOC,CAPD,gDAOC,CAPD,qDAOC,CAPD,iDAOC,CAPD,uDAOC,CAPD,mDAOC,CAPD,uFAOC","sources":["index.css"],"sourcesContent":["@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n/* You can add any global styles here */\nbody {\n  @apply bg-gray-100;\n}"],"names":[],"sourceRoot":""}

================
File: restaurant-review-frontend/build/asset-manifest.json
================
{
  "files": {
    "main.css": "/static/css/main.6829d6d5.css",
    "main.js": "/static/js/main.7abff490.js",
    "index.html": "/index.html",
    "main.6829d6d5.css.map": "/static/css/main.6829d6d5.css.map",
    "main.7abff490.js.map": "/static/js/main.7abff490.js.map"
  },
  "entrypoints": [
    "static/css/main.6829d6d5.css",
    "static/js/main.7abff490.js"
  ]
}

================
File: restaurant-review-frontend/build/index.html
================
<!doctype html><html lang="en"><head><meta charset="utf-8"/><link rel="icon" href="/favicon.ico"/><meta name="viewport" content="width=device-width,initial-scale=1"/><meta name="theme-color" content="#000000"/><meta name="description" content="Restaurant Review Application"/><link rel="apple-touch-icon" href="/logo192.png"/><link rel="manifest" href="/manifest.json"/><script src="https://cdn.tailwindcss.com"></script><title>Restaurant Reviews</title><script defer="defer" src="/static/js/main.7abff490.js"></script><link href="/static/css/main.6829d6d5.css" rel="stylesheet"></head><body><noscript>You need to enable JavaScript to run this app.</noscript><div id="root"></div></body></html>

================
File: restaurant-review-frontend/public/index.html
================
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" href="%PUBLIC_URL%/favicon.ico" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <meta name="theme-color" content="#000000" />
    <meta
      name="description"
      content="Restaurant Review Application"
    />
    <link rel="apple-touch-icon" href="%PUBLIC_URL%/logo192.png" />
    <link rel="manifest" href="%PUBLIC_URL%/manifest.json" />
    <script src="https://cdn.tailwindcss.com"></script>
    <title>Restaurant Reviews</title>
  </head>
  <body>
    <noscript>You need to enable JavaScript to run this app.</noscript>
    <div id="root"></div>
  </body>
</html>

================
File: restaurant-review-frontend/src/components/CouponList.js
================
// src/components/CouponList.js
import React, { useState, useEffect } from 'react';
import api from '../utils/api';

function CouponList() {
  const [coupons, setCoupons] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);

  useEffect(() => {
    const fetchCoupons = async () => {
      try {
        setLoading(true);
        const response = await api.get('/coupons/user');
        setCoupons(response.data);
        setLoading(false);
      } catch (err) {
        setError('Failed to fetch coupons. Please try again later.');
        setLoading(false);
        console.error('Error fetching coupons:', err);
      }
    };

    fetchCoupons();
  }, []);

  if (loading) return <div>Loading coupons...</div>;
  if (error) return <div>{error}</div>;

  return (
    <div className="coupon-list">
      <h3>Your Coupons</h3>
      {coupons.length === 0 ? (
        <p>You don't have any coupons yet. Write a review to earn coupons!</p>
      ) : (
        coupons.map(coupon => (
          <div key={coupon._id} className="coupon">
            <h4>Discount: {coupon.discount}% off</h4>
            <p>Code: <strong>{coupon.code}</strong></p>
            <p>Valid until: {new Date(coupon.expiresAt).toLocaleDateString()}</p>
            <p>Status: {coupon.isUsed ? 'Used' : 'Available'}</p>
          </div>
        ))
      )}
    </div>
  );
}

export default CouponList;

================
File: restaurant-review-frontend/src/components/CouponPage.js
================
import React, { useState, useEffect } from 'react';

function CouponPage() {
  const [coupon, setCoupon] = useState(null);

  useEffect(() => {
    // Generate or fetch a coupon
    generateCoupon();
  }, []);

  const generateCoupon = () => {
    // This would typically involve an API call to your backend
    const newCoupon = {
      code: 'REVIEW10',
      discount: '10%',
      expiryDate: '2023-12-31'
    };
    setCoupon(newCoupon);
  };

  return (
    <div>
      <h2>Thank You for Your Review!</h2>
      {coupon ? (
        <div>
          <h3>Here's your coupon:</h3>
          <p>Code: {coupon.code}</p>
          <p>Discount: {coupon.discount}</p>
          <p>Valid until: {coupon.expiryDate}</p>
        </div>
      ) : (
        <p>Loading your coupon...</p>
      )}
    </div>
  );
}

export default CouponPage;

================
File: restaurant-review-frontend/src/components/CouponSystem.js
================
// src/components/CouponSystem.js
import React, { useState, useEffect } from 'react';
import axios from 'axios';

function CouponSystem() {
  const [coupons, setCoupons] = useState([]);
  const [couponCode, setCouponCode] = useState('');
  const [redeemMessage, setRedeemMessage] = useState('');

  useEffect(() => {
    const fetchCoupons = async () => {
      try {
        const response = await axios.get('/api/coupons/user/user-id'); // Replace with actual user ID
        setCoupons(response.data);
      } catch (error) {
        console.error('Error fetching coupons:', error);
      }
    };
    fetchCoupons();
  }, []);

  const handleRedeem = async () => {
    try {
      const response = await axios.post('/api/coupons/redeem', { code: couponCode });
      setRedeemMessage(response.data.message);
      setCouponCode('');
      // Refresh coupons list
      const updatedCoupons = await axios.get('/api/coupons/user/user-id'); // Replace with actual user ID
      setCoupons(updatedCoupons.data);
    } catch (error) {
      setRedeemMessage('Error redeeming coupon. Please try again.');
      console.error('Error redeeming coupon:', error);
    }
  };

  return (
    <div className="coupon-system">
      <h2>Your Coupons</h2>
      <div className="coupon-list">
        {coupons.map((coupon) => (
          <div key={coupon._id} className="coupon">
            <p>Code: {coupon.code}</p>
            <p>Discount: {coupon.discount}%</p>
            <p>Expires: {new Date(coupon.expiresAt).toLocaleDateString()}</p>
            <p>Status: {coupon.isUsed ? 'Used' : 'Available'}</p>
          </div>
        ))}
      </div>
      <div className="redeem-coupon">
        <h3>Redeem a Coupon</h3>
        <input
          type="text"
          value={couponCode}
          onChange={(e) => setCouponCode(e.target.value)}
          placeholder="Enter coupon code"
        />
        <button onClick={handleRedeem}>Redeem</button>
        {redeemMessage && <p>{redeemMessage}</p>}
      </div>
    </div>
  );
}

export default CouponSystem;

================
File: restaurant-review-frontend/src/components/Dashboard.js
================
// src/components/Dashboard.js
import React, { useState, useEffect, useContext } from 'react';
import { AuthContext } from '../context/AuthContext';
import api from '../utils/api';

function Dashboard() {
  const [restaurants, setRestaurants] = useState([]);
  const { user } = useContext(AuthContext);

  useEffect(() => {
    const fetchRestaurants = async () => {
      try {
        const response = await api.get('/restaurants/owner');
        setRestaurants(response.data);
      } catch (error) {
        console.error('Error fetching restaurants', error);
      }
    };

    if (user && user.role === 'restaurant_owner') {
      fetchRestaurants();
    }
  }, [user]);

  if (user.role !== 'restaurant_owner') {
    return <div>Access denied. Only restaurant owners can view this dashboard.</div>;
  }

  return (
    <div className="dashboard">
      <h2>Restaurant Owner Dashboard</h2>
      {restaurants.map(restaurant => (
        <div key={restaurant._id} className="dashboard-restaurant">
          <h3>{restaurant.name}</h3>
          <p>Average Rating: {restaurant.averageRating.toFixed(1)}</p>
          <p>Total Reviews: {restaurant.reviewCount}</p>
          <button onClick={() => {/* Add logic to view detailed stats */}}>View Detailed Stats</button>
        </div>
      ))}
    </div>
  );
}

export default Dashboard;

================
File: restaurant-review-frontend/src/components/Footer.js
================
import React from 'react';

const Footer = () => (
  <footer className="bg-gray-800 text-white py-4">
    <div className="container mx-auto px-4 text-center">
      <p>&copy; 2024 RestauReview. All rights reserved.</p>
    </div>
  </footer>
);

export default Footer;

================
File: restaurant-review-frontend/src/components/Header.js
================
import React from 'react';
import { Link } from 'react-router-dom';
import { useAuth } from '../context/AuthContext';

const Header = () => {
  const { user, logout } = useAuth();

  return (
    <header className="bg-blue-600 text-white shadow-md">
      <div className="container mx-auto px-4 py-4 flex justify-between items-center">
        <Link to="/" className="text-2xl font-bold">RestauReview</Link>
        <nav>
          <ul className="flex space-x-4">
            <li><Link to="/" className="hover:text-blue-200">Home</Link></li>
            {user ? (
              <>
                <li><Link to="/profile" className="hover:text-blue-200">Profile</Link></li>
                <li><Link to="/scan" className="hover:text-blue-200">Scan QR</Link></li>
                <li><button onClick={logout} className="hover:text-blue-200">Logout</button></li>
              </>
            ) : (
              <>
                <li><Link to="/login" className="hover:text-blue-200">Login</Link></li>
                <li><Link to="/register" className="hover:text-blue-200">Register</Link></li>
              </>
            )}
          </ul>
        </nav>
      </div>
    </header>
  );
};

export default Header;

================
File: restaurant-review-frontend/src/components/Layout.js
================
import React from 'react';
import Header from './Header';
import Footer from './Footer';

const Layout = ({ children }) => (
  <div className="flex flex-col min-h-screen bg-gray-100">
    <Header />
    <main className="flex-grow container mx-auto px-4 py-8">
      {children}
    </main>
    <Footer />
  </div>
);

export default Layout;

================
File: restaurant-review-frontend/src/components/Login.js
================
import React, { useState } from 'react';
import { useNavigate } from 'react-router-dom';
import { useAuth } from '../context/AuthContext';
import api from '../utils/api';
import UserTypeToggle from './UserTypeToggle';  // Adjust the path if necessary


const Login = () => {
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [error, setError] = useState('');
  const [userType, setUserType] = useState('customer');
  const navigate = useNavigate();
  const { login } = useAuth();

  const handleSubmit = async (e) => {
    e.preventDefault();
    try {
      const response = await api.post('/users/login', { email, password, role: userType });
      login(response.data);
      navigate(userType === 'restaurant' ? '/restaurant-dashboard' : '/');
    } catch (err) {
      setError('Invalid email or password');
    }
  };

  return (
    <div className="max-w-md mx-auto mt-8">
      <h2 className="text-2xl mb-6 text-center font-bold">Login</h2>
      <UserTypeToggle userType={userType} setUserType={setUserType} />
      <form onSubmit={handleSubmit} className="bg-white shadow-md rounded px-8 pt-6 pb-8 mb-4">
        {error && <p className="text-red-500 text-xs italic mb-4">{error}</p>}
        <div className="mb-4">
          <label className="block text-gray-700 text-sm font-bold mb-2" htmlFor="email">
            Email
          </label>
          <input
            className="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline"
            id="email"
            type="email"
            placeholder="Email"
            value={email}
            onChange={(e) => setEmail(e.target.value)}
            required
          />
        </div>
        <div className="mb-6">
          <label className="block text-gray-700 text-sm font-bold mb-2" htmlFor="password">
            Password
          </label>
          <input
            className="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 mb-3 leading-tight focus:outline-none focus:shadow-outline"
            id="password"
            type="password"
            placeholder="******************"
            value={password}
            onChange={(e) => setPassword(e.target.value)}
            required
          />
        </div>
        <div className="flex items-center justify-between">
          <button
            className="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline"
            type="submit"
          >
            Sign In
          </button>
        </div>
      </form>
    </div>
  );
};

export default Login;

================
File: restaurant-review-frontend/src/components/PrivateRoute.js
================
import React from 'react';
import { Navigate } from 'react-router-dom';
import { useAuth } from '../context/AuthContext';

const PrivateRoute = ({ children }) => {
  const { user } = useAuth();

  if (!user) {
    return <Navigate to="/login" replace />;
  }

  return children;
};

export default PrivateRoute;

================
File: restaurant-review-frontend/src/components/ProfileEditor.js
================
import React, { useState } from 'react';
import api from '../utils/api';

const ProfileEditor = ({ restaurant }) => {
  const [name, setName] = useState(restaurant.name);
  const [address, setAddress] = useState(restaurant.address);
  const [cuisine, setCuisine] = useState(restaurant.cuisine);
  const [saving, setSaving] = useState(false);
  const [error, setError] = useState('');

  const handleSave = async () => {
    try {
      setSaving(true);
      await api.patch(`/restaurants/${restaurant._id}`, { name, address, cuisine });
      setSaving(false);
      // Show success message or redirect
    } catch (err) {
      setError('Failed to update profile');
      setSaving(false);
      console.error(err);
    }
  };

  return (
    <div>
      {error && <p className="text-red-500 mb-4">{error}</p>}
      <div className="mb-4">
        <label htmlFor="name" className="block mb-1">Name</label>
        <input 
          type="text" 
          id="name"
          value={name}
          onChange={e => setName(e.target.value)}
          className="w-full px-3 py-2 border rounded"
        />
      </div>
      <div className="mb-4">
        <label htmlFor="address" className="block mb-1">Address</label>
        <input
          type="text"
          id="address" 
          value={address}
          onChange={e => setAddress(e.target.value)}
          className="w-full px-3 py-2 border rounded"
        />
      </div>
      <div className="mb-4">
        <label htmlFor="cuisine" className="block mb-1">Cuisine</label>
        <input
          type="text"
          id="cuisine"
          value={cuisine}
          onChange={e => setCuisine(e.target.value)} 
          className="w-full px-3 py-2 border rounded"
        />
      </div>
      <button 
        onClick={handleSave}
        disabled={saving}
        className="bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600 disabled:opacity-50"
      >
        {saving ? 'Saving...' : 'Save'}
      </button>
    </div>
  );
};

export default ProfileEditor;

================
File: restaurant-review-frontend/src/components/QRCodeGenerator.js
================
import React, { useState, useEffect } from 'react';
import QRCode from 'qrcode.react';
import api from '../utils/api';

const QRCodeGenerator = ({ restaurantId }) => {
  const [qrCodeData, setQRCodeData] = useState('');
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState('');

  useEffect(() => {
    const fetchQRCode = async () => {
      try {
        setLoading(true);
        const response = await api.get(`/restaurants/${restaurantId}/qrcode`);
        setQRCodeData(response.data.qrCodeData);
        setLoading(false);
      } catch (err) {
        setError('Failed to generate QR code');
        setLoading(false);
        console.error(err);
      }
    };

    fetchQRCode();
  }, [restaurantId]);

  if (loading) return <div>Generating QR code...</div>;
  if (error) return <div className="text-red-500">{error}</div>;

  return (
    <div>
      <QRCode value={qrCodeData} size={200} />
      <p className="mt-2">Scan this QR code to leave a review</p>
    </div>
  );
};

export default QRCodeGenerator;

================
File: restaurant-review-frontend/src/components/QRscanner.js
================
import React, { useState, useRef } from 'react';
import { useNavigate } from 'react-router-dom';
import Webcam from 'react-webcam';

const QRScanner = () => {
  const [qrCode, setQrCode] = useState('');
  const [error, setError] = useState('');
  const navigate = useNavigate();
  const webcamRef = useRef(null);

  const captureQR = async () => {
    const imageSrc = webcamRef.current.getScreenshot();
    // Simulating QR code detection
    setQrCode('Sample QR Code');
    navigate('/review/123');
  };

  return (
    <div className="max-w-md mx-auto bg-white p-6 rounded-lg shadow-md">
      <h2 className="text-2xl font-bold mb-4 text-center text-gray-800">Scan Restaurant QR Code</h2>
      <div className="mb-4">
        <Webcam
          ref={webcamRef}
          screenshotFormat="image/jpeg"
          className="w-full rounded"
        />
      </div>
      <button 
        onClick={captureQR}
        className="w-full bg-blue-500 hover:bg-blue-600 text-white font-bold py-2 px-4 rounded transition duration-300"
      >
        Capture QR Code
      </button>
      {qrCode && <p className="mt-4 text-center text-green-600">QR Code scanned: {qrCode}</p>}
      {error && <p className="mt-4 text-center text-red-500">{error}</p>}
    </div>
  );
};

export default QRScanner;

================
File: restaurant-review-frontend/src/components/Register.js
================
import React, { useState } from 'react';
import { useNavigate } from 'react-router-dom';
import { useAuth } from '../context/AuthContext';
import api from '../utils/api';
import UserTypeToggle from './UserTypeToggle';  // Adjust the path if necessary


const Register = () => {
  const [formData, setFormData] = useState({
    username: '',
    email: '',
    password: '',
    restaurantName: '',
    address: '',
    cuisine: ''
  });
  const [error, setError] = useState('');
  const [userType, setUserType] = useState('customer');
  const navigate = useNavigate();
  const { login } = useAuth();

  const handleChange = (e) => {
    setFormData({ ...formData, [e.target.name]: e.target.value });
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    try {
      const userData = {
        username: formData.username,
        email: formData.email,
        password: formData.password,
        role: userType
      };

      if (userType === 'restaurant') {
        userData.restaurantInfo = {
          name: formData.restaurantName,
          address: formData.address,
          cuisine: formData.cuisine
        };
      }

      const response = await api.post('/users/register', userData);
      login(response.data);
      navigate(userType === 'restaurant' ? '/restaurant-dashboard' : '/');
    } catch (err) {
      setError('Registration failed. Please try again.');
      console.error(err);
    }
  };

  return (
    <div className="max-w-md mx-auto mt-8">
      <h2 className="text-2xl mb-6 text-center font-bold">Register</h2>
      <UserTypeToggle userType={userType} setUserType={setUserType} />
      <form onSubmit={handleSubmit} className="bg-white shadow-md rounded px-8 pt-6 pb-8 mb-4">
        {error && <p className="text-red-500 text-xs italic mb-4">{error}</p>}
        <div className="mb-4">
          <label className="block text-gray-700 text-sm font-bold mb-2" htmlFor="username">
            Username
          </label>
          <input
            className="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline"
            id="username"
            type="text"
            name="username"
            placeholder="Username"
            value={formData.username}
            onChange={handleChange}
            required
          />
        </div>
        <div className="mb-4">
          <label className="block text-gray-700 text-sm font-bold mb-2" htmlFor="email">
            Email
          </label>
          <input
            className="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline"
            id="email"
            type="email"
            name="email"
            placeholder="Email"
            value={formData.email}
            onChange={handleChange}
            required
          />
        </div>
        <div className="mb-6">
          <label className="block text-gray-700 text-sm font-bold mb-2" htmlFor="password">
            Password
          </label>
          <input
            className="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 mb-3 leading-tight focus:outline-none focus:shadow-outline"
            id="password"
            type="password"
            name="password"
            placeholder="******************"
            value={formData.password}
            onChange={handleChange}
            required
          />
        </div>
        {userType === 'restaurant' && (
          <>
            <div className="mb-4">
              <label className="block text-gray-700 text-sm font-bold mb-2" htmlFor="restaurantName">
                Restaurant Name
              </label>
              <input
                className="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline"
                id="restaurantName"
                type="text"
                name="restaurantName"
                placeholder="Restaurant Name"
                value={formData.restaurantName}
                onChange={handleChange}
                required
              />
            </div>
            <div className="mb-4">
              <label className="block text-gray-700 text-sm font-bold mb-2" htmlFor="address">
                Address
              </label>
              <input
                className="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline"
                id="address"
                type="text"
                name="address"
                placeholder="Address"
                value={formData.address}
                onChange={handleChange}
                required
              />
            </div>
            <div className="mb-6">
              <label className="block text-gray-700 text-sm font-bold mb-2" htmlFor="cuisine">
                Cuisine Type
              </label>
              <input
                className="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline"
                id="cuisine"
                type="text"
                name="cuisine"
                placeholder="Cuisine Type"
                value={formData.cuisine}
                onChange={handleChange}
                required
              />
            </div>
          </>
        )}
        <div className="flex items-center justify-between">
          <button
            className="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline"
            type="submit"
          >
            Register
          </button>
        </div>
      </form>
    </div>
  );
};

export default Register;

================
File: restaurant-review-frontend/src/components/RestaurantCard.js
================
// src/components/RestaurantCard.js
import React from 'react';

function RestaurantCard({ restaurant }) {
  return (
    <div className="restaurant-card">
      <h3>{restaurant.name}</h3>
      <p>{restaurant.address}</p>
      <p>Average Rating: {restaurant.averageRating.toFixed(1)}</p>
      <p>Reviews: {restaurant.reviewCount}</p>
    </div>
  );
}

export default RestaurantCard;

================
File: restaurant-review-frontend/src/components/RestaurantDashboard.js
================
import React, { useState, useEffect } from 'react';
import { useParams } from 'react-router-dom';
import api from '../utils/api';
import ProfileEditor from './ProfileEditor';
import QRCodeGenerator from './QRCodeGenerator';

const RestaurantDashboard = () => {
  const [restaurant, setRestaurant] = useState(null);
  const [reviews, setReviews] = useState([]);
  const [metrics, setMetrics] = useState({});
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState('');
  const { restaurantId } = useParams();

  useEffect(() => {
    const fetchDashboardData = async () => {
      try {
        setLoading(true);
        const [restaurantData, reviewsData, metricsData] = await Promise.all([
          api.get(`/restaurants/${restaurantId}`),
          api.get(`/reviews/restaurant/${restaurantId}`),
          api.get(`/reviews/summary/${restaurantId}`)
        ]);
        setRestaurant(restaurantData.data);
        setReviews(reviewsData.data);
        setMetrics(metricsData.data);
        setLoading(false);
      } catch (err) {
        setError('Failed to fetch dashboard data');
        setLoading(false);
        console.error(err);
      }
    };

    fetchDashboardData();
  }, [restaurantId]);

  if (loading) return <div className="text-center mt-8">Loading dashboard...</div>;
  if (error) return <div className="text-center mt-8 text-red-500">{error}</div>;

  return (
    <div className="container mx-auto px-4 py-8">
      <h1 className="text-3xl font-bold mb-6">{restaurant.name} Dashboard</h1>
      
      <div className="grid grid-cols-1 md:grid-cols-3 gap-8">
        {/* Review Metrics */}
        <div className="bg-white p-6 rounded-lg shadow">
          <h2 className="text-xl font-semibold mb-4">Review Metrics</h2>
          <p>Average Rating: {metrics.averageRating.toFixed(1)}</p>
          <p>Total Reviews: {metrics.totalReviews}</p>
          <p>Positive Reviews: {metrics.positiveReviews}</p>
          <p>Negative Reviews: {metrics.negativeReviews}</p>
        </div>

        {/* Recent Reviews */}  
        <div className="bg-white p-6 rounded-lg shadow">
          <h2 className="text-xl font-semibold mb-4">Recent Reviews</h2>
          {reviews.slice(0, 5).map(review => (
            <div key={review._id} className="mb-4">
              <p>Rating: {review.rating}</p>
              <p>{review.text}</p>
            </div>
          ))}
        </div>

        {/* Profile Editor */}
        <div className="bg-white p-6 rounded-lg shadow">
          <h2 className="text-xl font-semibold mb-4">Edit Profile</h2>
          <ProfileEditor restaurant={restaurant} />
        </div>
      </div>

      {/* QR Code Generator */}
      <div className="mt-8 bg-white p-6 rounded-lg shadow">  
        <h2 className="text-xl font-semibold mb-4">QR Code Generator</h2>
        <QRCodeGenerator restaurantId={restaurantId} />
      </div>
    </div>
  );
};

export default RestaurantDashboard;

================
File: restaurant-review-frontend/src/components/RestaurantList.js
================
// src/components/RestaurantList.js
import React, { useState, useEffect } from 'react';
import { Link } from 'react-router-dom';
import api from '../utils/api';
import RestaurantCard from './RestaurantCard';

function RestaurantList() {
  const [restaurants, setRestaurants] = useState([]);

  useEffect(() => {
    const fetchRestaurants = async () => {
      try {
        const response = await api.get('/restaurants');
        setRestaurants(response.data);
      } catch (error) {
        console.error('Error fetching restaurants', error);
      }
    };
    fetchRestaurants();
  }, []);

  return (
    <div className="restaurant-list">
      <h2>Restaurants</h2>
      {restaurants.map(restaurant => (
        <Link to={`/restaurant/${restaurant._id}`} key={restaurant._id}>
          <RestaurantCard restaurant={restaurant} />
        </Link>
      ))}
    </div>
  );
}

export default RestaurantList;

================
File: restaurant-review-frontend/src/components/RestaurantRegister.js
================
// src/components/RestaurantRegister.js
import React, { useState } from 'react';
import { useNavigate } from 'react-router-dom';
import { useAuth } from '../context/AuthContext';
import api from '../utils/api';

const RestaurantRegister = () => {
  const [formData, setFormData] = useState({
    username: '',
    email: '',
    password: '',
    restaurantName: '',
    address: '',
    cuisine: ''
  });
  const [error, setError] = useState('');
  const navigate = useNavigate();
  const { login } = useAuth();

  const handleChange = (e) => {
    setFormData({ ...formData, [e.target.name]: e.target.value });
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    try {
      const response = await api.post('/users/register', {
        ...formData,
        role: 'restaurant',
        restaurantInfo: {
          name: formData.restaurantName,
          address: formData.address,
          cuisine: formData.cuisine
        }
      });
      login(response.data);
      navigate('/restaurant-dashboard');
    } catch (err) {
      setError('Registration failed. Please try again.');
      console.error(err);
    }
  };

  return (
    <form onSubmit={handleSubmit}>
      {/* Add input fields for username, email, password, restaurantName, address, and cuisine */}
      <button type="submit">Register Restaurant</button>
      {error && <p>{error}</p>}
    </form>
  );
};

export default RestaurantRegister;

================
File: restaurant-review-frontend/src/components/ReviewForm.js
================
// src/components/ReviewForm.js
import React, { useState, useEffect } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import { useAuth } from '../context/AuthContext';
import api from '../utils/api';

const ReviewForm = () => {
  const [rating, setRating] = useState(0);
  const [review, setReview] = useState('');
  const [restaurant, setRestaurant] = useState(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState('');
  const { restaurantId } = useParams();
  const navigate = useNavigate();
  const { user } = useAuth();

  useEffect(() => {
    const fetchRestaurant = async () => {
      try {
        setLoading(true);
        const response = await api.get(`/restaurants/${restaurantId}`);
        setRestaurant(response.data);
      } catch (err) {
        setError('Failed to fetch restaurant information.');
        console.error(err);
      } finally {
        setLoading(false);
      }
    };

    fetchRestaurant();
  }, [restaurantId]);

  const handleSubmit = async (e) => {
    e.preventDefault();
    if (!user) {
      navigate('/login', { state: { from: `/review/${restaurantId}` } });
      return;
    }
    try {
      await api.post('/reviews', { restaurantId, rating, text: review });
      navigate(`/restaurant/${restaurantId}`, { state: { message: 'Review submitted successfully!' } });
    } catch (err) {
      setError('Failed to submit review. Please try again.');
      console.error(err);
    }
  };

  if (loading) return <div className="text-center">Loading...</div>;
  if (error) return <div className="text-center text-red-500">{error}</div>;

  return (
    <div className="max-w-2xl mx-auto bg-white p-8 rounded-lg shadow-md">
      <h2 className="text-3xl font-bold mb-6 text-center text-gray-800">Review {restaurant?.name}</h2>
      <form onSubmit={handleSubmit} className="space-y-6">
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-1">Rating</label>
          <div className="flex justify-center space-x-2">
            {[1, 2, 3, 4, 5].map((star) => (
              <button
                key={star}
                type="button"
                onClick={() => setRating(star)}
                className={`text-3xl ${star <= rating ? 'text-yellow-400' : 'text-gray-300'}`}
              >
                ★
              </button>
            ))}
          </div>
        </div>
        <div>
          <label htmlFor="review" className="block text-sm font-medium text-gray-700 mb-1">Your Review</label>
          <textarea
            id="review"
            rows="4"
            value={review}
            onChange={(e) => setReview(e.target.value)}
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-300 focus:ring focus:ring-indigo-200 focus:ring-opacity-50"
            placeholder="Write your review here..."
            required
          />
        </div>
        <button
          type="submit"
          className="w-full bg-blue-500 hover:bg-blue-600 text-white font-bold py-2 px-4 rounded transition duration-300"
        >
          Submit Review
        </button>
      </form>
    </div>
  );
};

export default ReviewForm;

================
File: restaurant-review-frontend/src/components/ReviewList.js
================
// src/components/ReviewList.js
import React, { useState, useEffect } from 'react';
import api from '../utils/api';

function ReviewList({ restaurantId }) {
  const [reviews, setReviews] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);

  useEffect(() => {
    const fetchReviews = async () => {
      try {
        setLoading(true);
        const response = await api.get(`/reviews/restaurant/${restaurantId}`);
        setReviews(response.data);
        setLoading(false);
      } catch (err) {
        setError('Failed to fetch reviews. Please try again later.');
        setLoading(false);
        console.error('Error fetching reviews:', err);
      }
    };

    fetchReviews();
  }, [restaurantId]);

  if (loading) return <div>Loading reviews...</div>;
  if (error) return <div>{error}</div>;

  return (
    <div className="review-list">
      <h3>Customer Reviews</h3>
      {reviews.length === 0 ? (
        <p>No reviews yet. Be the first to review!</p>
      ) : (
        reviews.map(review => (
          <div key={review._id} className="review">
            <p>Rating: {review.rating}/5</p>
            <p>{review.text}</p>
            <p>Sentiment: {review.sentiment > 0 ? 'Positive' : review.sentiment < 0 ? 'Negative' : 'Neutral'}</p>
            <small>Date: {new Date(review.createdAt).toLocaleDateString()}</small>
          </div>
        ))
      )}
    </div>
  );
}

export default ReviewList;

================
File: restaurant-review-frontend/src/components/UserTypeToggle.js
================
import React from 'react';
import { UserIcon, Store } from 'lucide-react';

const UserTypeToggle = ({ userType, setUserType }) => {
  return (
    <div className="flex justify-center space-x-4 mb-6">
      <button
        onClick={() => setUserType('customer')}
        className={`flex items-center px-4 py-2 rounded-lg ${
          userType === 'customer'
            ? 'bg-blue-500 text-white'
            : 'bg-gray-200 text-gray-700'
        }`}
      >
        <UserIcon className="w-5 h-5 mr-2" />
        Customer
      </button>
      <button
        onClick={() => setUserType('restaurant')}
        className={`flex items-center px-4 py-2 rounded-lg ${
          userType === 'restaurant'
            ? 'bg-blue-500 text-white'
            : 'bg-gray-200 text-gray-700'
        }`}
      >
        <Store className="w-5 h-5 mr-2" />
        Restaurant
      </button>
    </div>
  );
};

export default UserTypeToggle;

================
File: restaurant-review-frontend/src/context/AuthContext.js
================
import React, { createContext, useState, useContext, useEffect } from 'react';

const AuthContext = createContext();

export const useAuth = () => useContext(AuthContext);

export const AuthProvider = ({ children }) => {
  const [user, setUser] = useState(null);

  useEffect(() => {
    const storedUser = localStorage.getItem('user');
    if (storedUser) {
      setUser(JSON.parse(storedUser));
    }
  }, []);

  const login = (userData) => {
    setUser({ ...userData, role: userData.role });
    localStorage.setItem('user', JSON.stringify({ ...userData, role: userData.role }));
  };

  const logout = () => {
    setUser(null);
    localStorage.removeItem('user');
  };

  return (
    <AuthContext.Provider value={{ user, login, logout }}>
      {children}
    </AuthContext.Provider>
  );
};

================
File: restaurant-review-frontend/src/utils/api.js
================
import axios from 'axios';

const api = axios.create({
  baseURL: process.env.REACT_APP_API_URL || 'http://localhost:5001/api',
  headers: {
    'Content-Type': 'application/json',
  },
});

api.interceptors.request.use(
  (config) => {
    const token = localStorage.getItem('token');
    if (token) {
      config.headers['Authorization'] = `Bearer ${token}`;
    }
    return config;
  },
  (error) => {
    return Promise.reject(error);
  }
);

export default api;

================
File: restaurant-review-frontend/src/App.js
================
import React from 'react';
import { BrowserRouter as Router, Route, Routes } from 'react-router-dom';
import { AuthProvider } from './context/AuthContext';
import Layout from './components/Layout';
import QRScanner from './components/QRscanner';
import ReviewForm from './components/ReviewForm';
import RestaurantDashboard from './components/RestaurantDashboard';
import CouponSystem from './components/CouponSystem';
import Login from './components/Login';
import Register from './components/Register';
import PrivateRoute from './components/PrivateRoute';
import RestaurantRegister from './components/RestaurantRegister'; // Add this line


function App() {
  return (
    <AuthProvider>
      <Router>
        <Layout>
          <Routes>
            <Route path="/" element={<QRScanner />} />
            <Route path="/review/:restaurantId" element={<ReviewForm />} />
            <Route 
              path="/dashboard/:restaurantId" 
              element={
                <PrivateRoute>
                  <RestaurantDashboard />
                </PrivateRoute>
              } 
            />
            <Route 
              path="/coupons" 
              element={
                <PrivateRoute>
                  <CouponSystem />
                </PrivateRoute>
              } 
            />
            <Route path="/login" element={<Login />} />
            <Route path="/register" element={<Register />} />
            <Route path="/restaurant-register" element={<RestaurantRegister />} />
            <Route 
                path="/restaurant-dashboard" 
                element={
                <PrivateRoute>
                    <RestaurantDashboard />
                </PrivateRoute>
                } 
          />
          </Routes>
        </Layout>
      </Router>
    </AuthProvider>
  );
}

export default App;

================
File: restaurant-review-frontend/src/index.css
================
@tailwind base;
@tailwind components;
@tailwind utilities;

/* You can add any global styles here */
body {
  @apply bg-gray-100;
}

================
File: restaurant-review-frontend/src/index.js
================
import React from 'react';
import ReactDOM from 'react-dom/client';
import './index.css';
import App from './App';

const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(
  <React.StrictMode>
    <App />
  </React.StrictMode>
);

================
File: restaurant-review-frontend/package.json
================
{
    "name": "restaurant-review-frontend",
    "version": "1.0.0",
    "private": true,
    "dependencies": {
        "axios": "^1.7.4",
        "bcryptjs": "^2.4.3",
        "jsonwebtoken": "^9.0.2",
        "lucide-react": "^0.435.0",
        "natural": "^8.0.1",
        "qrcode.react": "^3.1.0",
        "react": "^18.2.0",
        "react-dom": "^18.2.0",
        "react-qr-code": "^2.0.12",
        "react-router-dom": "^6.26.1",
        "react-scripts": "^5.0.1",
        "react-webcam": "^7.2.0",
        "recharts": "^2.12.7"
    },
    "scripts": {
        "start": "react-scripts start",
        "build": "react-scripts build",
        "test": "react-scripts test",
        "eject": "react-scripts eject"
    },
    "eslintConfig": {
        "extends": [
            "react-app",
            "react-app/jest"
        ]
    },
    "browserslist": {
        "production": [
            ">0.2%",
            "not dead",
            "not op_mini all"
        ],
        "development": [
            "last 1 chrome version",
            "last 1 firefox version",
            "last 1 safari version"
        ]
    },
    "devDependencies": {
        "autoprefixer": "^10.4.20",
        "postcss": "^8.4.41",
        "tailwindcss": "^3.4.10"
    }
}

================
File: restaurant-review-frontend/postcss.config.js
================
module.exports = {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
}

================
File: restaurant-review-frontend/repopack-output.txt
================
================================================================
Repopack Output File
================================================================

This file was generated by Repopack on: 2024-08-23T10:19:04.851Z

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This header section
2. Repository structure
3. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
1. This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
2. When processing this file, use the separators and "File:" markers to
  distinguish between different files in the repository.
3. Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repopack's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.



For more information about Repopack, visit: https://github.com/yamadashy/repopack

================================================================
Repository Structure
================================================================
public/
  index.html
src/
  components/
    CouponList.js
    CouponPage.js
    CouponSystem.js
    Dashboard.js
    Footer.js
    Header.js
    QRscanner.js
    RestaurantCard.js
    RestaurantDashboard.js
    RestaurantList.js
    ReviewForm.js
    ReviewList.js
  context/
    AuthContext.js
  utils/
    api.js
  App.js
  index.css
  index.js
package.json

================================================================
Repository Files
================================================================

================
File: public/index.html
================
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" href="%PUBLIC_URL%/favicon.ico" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <meta name="theme-color" content="#000000" />
    <meta
      name="description"
      content="Restaurant Review Application"
    />
    <link rel="apple-touch-icon" href="%PUBLIC_URL%/logo192.png" />
    <link rel="manifest" href="%PUBLIC_URL%/manifest.json" />
    <title>Restaurant Reviews</title>
  </head>
  <body>
    <noscript>You need to enable JavaScript to run this app.</noscript>
    <div id="root"></div>
  </body>
</html>

================
File: src/components/CouponList.js
================
// src/components/CouponList.js
import React, { useState, useEffect } from 'react';
import api from '../utils/api';

function CouponList() {
  const [coupons, setCoupons] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);

  useEffect(() => {
    const fetchCoupons = async () => {
      try {
        setLoading(true);
        const response = await api.get('/coupons/user');
        setCoupons(response.data);
        setLoading(false);
      } catch (err) {
        setError('Failed to fetch coupons. Please try again later.');
        setLoading(false);
        console.error('Error fetching coupons:', err);
      }
    };

    fetchCoupons();
  }, []);

  if (loading) return <div>Loading coupons...</div>;
  if (error) return <div>{error}</div>;

  return (
    <div className="coupon-list">
      <h3>Your Coupons</h3>
      {coupons.length === 0 ? (
        <p>You don't have any coupons yet. Write a review to earn coupons!</p>
      ) : (
        coupons.map(coupon => (
          <div key={coupon._id} className="coupon">
            <h4>Discount: {coupon.discount}% off</h4>
            <p>Code: <strong>{coupon.code}</strong></p>
            <p>Valid until: {new Date(coupon.expiresAt).toLocaleDateString()}</p>
            <p>Status: {coupon.isUsed ? 'Used' : 'Available'}</p>
          </div>
        ))
      )}
    </div>
  );
}

export default CouponList;

================
File: src/components/CouponPage.js
================
import React, { useState, useEffect } from 'react';

function CouponPage() {
  const [coupon, setCoupon] = useState(null);

  useEffect(() => {
    // Generate or fetch a coupon
    generateCoupon();
  }, []);

  const generateCoupon = () => {
    // This would typically involve an API call to your backend
    const newCoupon = {
      code: 'REVIEW10',
      discount: '10%',
      expiryDate: '2023-12-31'
    };
    setCoupon(newCoupon);
  };

  return (
    <div>
      <h2>Thank You for Your Review!</h2>
      {coupon ? (
        <div>
          <h3>Here's your coupon:</h3>
          <p>Code: {coupon.code}</p>
          <p>Discount: {coupon.discount}</p>
          <p>Valid until: {coupon.expiryDate}</p>
        </div>
      ) : (
        <p>Loading your coupon...</p>
      )}
    </div>
  );
}

export default CouponPage;

================
File: src/components/CouponSystem.js
================
// src/components/CouponSystem.js
import React, { useState, useEffect } from 'react';
import axios from 'axios';

function CouponSystem() {
  const [coupons, setCoupons] = useState([]);
  const [couponCode, setCouponCode] = useState('');
  const [redeemMessage, setRedeemMessage] = useState('');

  useEffect(() => {
    const fetchCoupons = async () => {
      try {
        const response = await axios.get('/api/coupons/user/user-id'); // Replace with actual user ID
        setCoupons(response.data);
      } catch (error) {
        console.error('Error fetching coupons:', error);
      }
    };
    fetchCoupons();
  }, []);

  const handleRedeem = async () => {
    try {
      const response = await axios.post('/api/coupons/redeem', { code: couponCode });
      setRedeemMessage(response.data.message);
      setCouponCode('');
      // Refresh coupons list
      const updatedCoupons = await axios.get('/api/coupons/user/user-id'); // Replace with actual user ID
      setCoupons(updatedCoupons.data);
    } catch (error) {
      setRedeemMessage('Error redeeming coupon. Please try again.');
      console.error('Error redeeming coupon:', error);
    }
  };

  return (
    <div className="coupon-system">
      <h2>Your Coupons</h2>
      <div className="coupon-list">
        {coupons.map((coupon) => (
          <div key={coupon._id} className="coupon">
            <p>Code: {coupon.code}</p>
            <p>Discount: {coupon.discount}%</p>
            <p>Expires: {new Date(coupon.expiresAt).toLocaleDateString()}</p>
            <p>Status: {coupon.isUsed ? 'Used' : 'Available'}</p>
          </div>
        ))}
      </div>
      <div className="redeem-coupon">
        <h3>Redeem a Coupon</h3>
        <input
          type="text"
          value={couponCode}
          onChange={(e) => setCouponCode(e.target.value)}
          placeholder="Enter coupon code"
        />
        <button onClick={handleRedeem}>Redeem</button>
        {redeemMessage && <p>{redeemMessage}</p>}
      </div>
    </div>
  );
}

export default CouponSystem;

================
File: src/components/Dashboard.js
================
// src/components/Dashboard.js
import React, { useState, useEffect, useContext } from 'react';
import { AuthContext } from '../context/AuthContext';
import api from '../utils/api';

function Dashboard() {
  const [restaurants, setRestaurants] = useState([]);
  const { user } = useContext(AuthContext);

  useEffect(() => {
    const fetchRestaurants = async () => {
      try {
        const response = await api.get('/restaurants/owner');
        setRestaurants(response.data);
      } catch (error) {
        console.error('Error fetching restaurants', error);
      }
    };

    if (user && user.role === 'restaurant_owner') {
      fetchRestaurants();
    }
  }, [user]);

  if (user.role !== 'restaurant_owner') {
    return <div>Access denied. Only restaurant owners can view this dashboard.</div>;
  }

  return (
    <div className="dashboard">
      <h2>Restaurant Owner Dashboard</h2>
      {restaurants.map(restaurant => (
        <div key={restaurant._id} className="dashboard-restaurant">
          <h3>{restaurant.name}</h3>
          <p>Average Rating: {restaurant.averageRating.toFixed(1)}</p>
          <p>Total Reviews: {restaurant.reviewCount}</p>
          <button onClick={() => {/* Add logic to view detailed stats */}}>View Detailed Stats</button>
        </div>
      ))}
    </div>
  );
}

export default Dashboard;

================
File: src/components/Footer.js
================
import React from 'react';
import { Link } from 'react-router-dom';
import { useAuth } from '../context/AuthContext';

function Footer() {
  const { user, logout } = useAuth();

  return (
    <footer>
      <nav>
        <ul>
          <li><Link to="/">Home</Link></li>
          {user ? (
            <>
              <li><Link to="/profile">Profile</Link></li>
              <li><button onClick={logout}>Logout</button></li>
            </>
          ) : (
            <>
              <li><Link to="/login">Login</Link></li>
              <li><Link to="/register">Register</Link></li>
            </>
          )}
        </ul>
      </nav>
    </footer>
  );
}

export default Footer;

================
File: src/components/Header.js
================
import React from 'react';
import { Link } from 'react-router-dom';
import { useAuth } from '../context/AuthContext';

function Header() {
  const { user, logout } = useAuth();

  return (
    <header>
      <nav>
        <ul>
          <li><Link to="/">Home</Link></li>
          {user ? (
            <>
              <li><Link to="/profile">Profile</Link></li>
              <li><Link to="/scan">Scan QR</Link></li>
              {user.role === 'restaurant_owner' && (
                <li><Link to="/dashboard">Dashboard</Link></li>
              )}
              <li><button onClick={logout}>Logout</button></li>
            </>
          ) : (
            <>
              <li><Link to="/login">Login</Link></li>
              <li><Link to="/register">Register</Link></li>
            </>
          )}
        </ul>
      </nav>
    </header>
  );
}

export default Header;

================
File: src/components/QRscanner.js
================
import React, { useState, useRef } from 'react';
import { useNavigate } from 'react-router-dom';
import Webcam from 'react-webcam';
import api from '../utils/api';

function QRScanner() {
  const [qrCode, setQrCode] = useState('');
  const [error, setError] = useState('');
  const navigate = useNavigate();
  const webcamRef = useRef(null);

  const captureQR = async () => {
    const imageSrc = webcamRef.current.getScreenshot();
    try {
      const response = await api.post('/qr/process', { image: imageSrc });
      const { qrData } = response.data;
      setQrCode(qrData);
      navigate(`/restaurant/${qrData}`);
    } catch (error) {
      setError('Error processing image. Please try again.');
      console.error(error);
    }
  };

  return (
    <div className="qr-scanner max-w-md mx-auto bg-white p-6 rounded-lg shadow-md">
      <h2 className="text-2xl font-bold mb-4 text-center">Scan Restaurant QR Code</h2>
      <div className="mb-4">
        <Webcam
          ref={webcamRef}
          screenshotFormat="image/jpeg"
          className="w-full rounded"
        />
      </div>
      <button 
        onClick={captureQR}
        className="w-full bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded"
      >
        Capture QR Code
      </button>
      {qrCode && <p className="mt-4 text-center">QR Code scanned: {qrCode}</p>}
      {error && <p className="mt-4 text-red-500 text-center">{error}</p>}
    </div>
  );
}

export default QRScanner;

================
File: src/components/RestaurantCard.js
================
// src/components/RestaurantCard.js
import React from 'react';

function RestaurantCard({ restaurant }) {
  return (
    <div className="restaurant-card">
      <h3>{restaurant.name}</h3>
      <p>{restaurant.address}</p>
      <p>Average Rating: {restaurant.averageRating.toFixed(1)}</p>
      <p>Reviews: {restaurant.reviewCount}</p>
    </div>
  );
}

export default RestaurantCard;

================
File: src/components/RestaurantDashboard.js
================
// src/components/RestaurantDashboard.js
import React, { useState, useEffect } from 'react';
import { useParams } from 'react-router-dom';
import axios from 'axios';

function RestaurantDashboard() {
  const [restaurant, setRestaurant] = useState(null);
  const [reviews, setReviews] = useState([]);
  const [summary, setSummary] = useState({ positive: [], negative: [] });
  const { restaurantId } = useParams();

  useEffect(() => {
    const fetchData = async () => {
      try {
        const restaurantResponse = await axios.get(`/api/restaurants/${restaurantId}`);
        setRestaurant(restaurantResponse.data);

        const reviewsResponse = await axios.get(`/api/reviews/restaurant/${restaurantId}`);
        setReviews(reviewsResponse.data);

        const summaryResponse = await axios.get(`/api/reviews/summary/${restaurantId}`);
        setSummary(summaryResponse.data);
      } catch (error) {
        console.error('Error fetching dashboard data:', error);
      }
    };
    fetchData();
  }, [restaurantId]);

  return (
    <div className="restaurant-dashboard">
      <h2>{restaurant?.name} Dashboard</h2>
      <div className="summary">
        <h3>Review Summary</h3>
        <div className="positive">
          <h4>Positive Aspects</h4>
          <ul>
            {summary.positive.map((item, index) => (
              <li key={index}>{item}</li>
            ))}
          </ul>
        </div>
        <div className="negative">
          <h4>Areas for Improvement</h4>
          <ul>
            {summary.negative.map((item, index) => (
              <li key={index}>{item}</li>
            ))}
          </ul>
        </div>
      </div>
      <div className="reviews">
        <h3>Recent Reviews</h3>
        {reviews.map((review) => (
          <div key={review._id} className="review">
            <p>Rating: {review.rating}/5</p>
            <p>{review.text}</p>
            <p>Sentiment: {review.sentiment > 0 ? 'Positive' : review.sentiment < 0 ? 'Negative' : 'Neutral'}</p>
          </div>
        ))}
      </div>
    </div>
  );
}

export default RestaurantDashboard;

================
File: src/components/RestaurantList.js
================
// src/components/RestaurantList.js
import React, { useState, useEffect } from 'react';
import { Link } from 'react-router-dom';
import api from '../utils/api';
import RestaurantCard from './RestaurantCard';

function RestaurantList() {
  const [restaurants, setRestaurants] = useState([]);

  useEffect(() => {
    const fetchRestaurants = async () => {
      try {
        const response = await api.get('/restaurants');
        setRestaurants(response.data);
      } catch (error) {
        console.error('Error fetching restaurants', error);
      }
    };
    fetchRestaurants();
  }, []);

  return (
    <div className="restaurant-list">
      <h2>Restaurants</h2>
      {restaurants.map(restaurant => (
        <Link to={`/restaurant/${restaurant._id}`} key={restaurant._id}>
          <RestaurantCard restaurant={restaurant} />
        </Link>
      ))}
    </div>
  );
}

export default RestaurantList;

================
File: src/components/ReviewForm.js
================
// src/components/ReviewForm.js
import React, { useState, useEffect } from 'react';
import { useParams } from 'react-router-dom';
import axios from 'axios';
import { useAuth } from '../context/AuthContext';


function ReviewForm() {
  const [rating, setRating] = useState(0);
  const [review, setReview] = useState('');
  const [restaurant, setRestaurant] = useState(null);
  const [submitted, setSubmitted] = useState(false);
  const [coupon, setCoupon] = useState(null);
  const { restaurantId } = useParams();

  useEffect(() => {
    const fetchRestaurant = async () => {
      try {
        const response = await axios.get(`/api/restaurants/${restaurantId}`);
        setRestaurant(response.data);
      } catch (error) {
        console.error('Error fetching restaurant:', error);
      }
    };
    fetchRestaurant();
  }, [restaurantId]);

  const handleSubmit = async (e) => {
    e.preventDefault();
    try {
      const response = await axios.post('/api/reviews', { restaurantId, rating, review });
      const couponResponse = await axios.post('/api/coupons/generate', { userId: 'user-id' }); // Replace with actual user ID
      setSubmitted(true);
      setCoupon(couponResponse.data);
    } catch (error) {
      console.error('Error submitting review:', error);
    }
  };

  if (submitted) {
    return (
      <div className="review-submitted">
        <h2>Thank you for your review!</h2>
        {coupon && (
          <div className="coupon">
            <h3>Your Coupon</h3>
            <p>Code: {coupon.code}</p>
            <p>Discount: {coupon.discount}%</p>
            <p>Valid until: {new Date(coupon.expiresAt).toLocaleDateString()}</p>
          </div>
        )}
      </div>
    );
  }

  return (
    <div className="review-form">
      <h2>Review {restaurant?.name}</h2>
      <form onSubmit={handleSubmit}>
        <div className="rating">
          {[1, 2, 3, 4, 5].map((star) => (
            <span
              key={star}
              onClick={() => setRating(star)}
              style={{ cursor: 'pointer', color: star <= rating ? 'gold' : 'gray' }}
            >
              ★
            </span>
          ))}
        </div>
        <textarea
          value={review}
          onChange={(e) => setReview(e.target.value)}
          placeholder="Write your review here..."
          required
        />
        <button type="submit">Submit Review</button>
      </form>
    </div>
  );
}

export default ReviewForm;

================
File: src/components/ReviewList.js
================
// src/components/ReviewList.js
import React, { useState, useEffect } from 'react';
import api from '../utils/api';

function ReviewList({ restaurantId }) {
  const [reviews, setReviews] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);

  useEffect(() => {
    const fetchReviews = async () => {
      try {
        setLoading(true);
        const response = await api.get(`/reviews/restaurant/${restaurantId}`);
        setReviews(response.data);
        setLoading(false);
      } catch (err) {
        setError('Failed to fetch reviews. Please try again later.');
        setLoading(false);
        console.error('Error fetching reviews:', err);
      }
    };

    fetchReviews();
  }, [restaurantId]);

  if (loading) return <div>Loading reviews...</div>;
  if (error) return <div>{error}</div>;

  return (
    <div className="review-list">
      <h3>Customer Reviews</h3>
      {reviews.length === 0 ? (
        <p>No reviews yet. Be the first to review!</p>
      ) : (
        reviews.map(review => (
          <div key={review._id} className="review">
            <p>Rating: {review.rating}/5</p>
            <p>{review.text}</p>
            <p>Sentiment: {review.sentiment > 0 ? 'Positive' : review.sentiment < 0 ? 'Negative' : 'Neutral'}</p>
            <small>Date: {new Date(review.createdAt).toLocaleDateString()}</small>
          </div>
        ))
      )}
    </div>
  );
}

export default ReviewList;

================
File: src/context/AuthContext.js
================
import React, { createContext, useState, useContext } from 'react';

const AuthContext = createContext();

export const useAuth = () => useContext(AuthContext);

export const AuthProvider = ({ children }) => {
  const [user, setUser] = useState(null);

  const login = (userData) => {
    setUser(userData);
  };

  const logout = () => {
    setUser(null);
  };

  return (
    <AuthContext.Provider value={{ user, login, logout }}>
      {children}
    </AuthContext.Provider>
  );
};

================
File: src/utils/api.js
================
import axios from 'axios';

const api = axios.create({
  baseURL: 'http://localhost:5001/api', // Adjust this to match your backend URL
  headers: {
    'Content-Type': 'application/json',
  },
});

// Add a request interceptor to include the auth token
api.interceptors.request.use(
  (config) => {
    const token = localStorage.getItem('token');
    if (token) {
      config.headers['Authorization'] = `Bearer ${token}`;
    }
    return config;
  },
  (error) => {
    return Promise.reject(error);
  }
);

export default api;

================
File: src/App.js
================
import React from 'react';
import { BrowserRouter as Router, Route, Routes, Link } from 'react-router-dom';
import { AuthProvider } from './context/AuthContext';
import QRScanner from './components/QRscanner';
import ReviewForm from './components/ReviewForm';
import RestaurantDashboard from './components/RestaurantDashboard';
import CouponSystem from './components/CouponSystem';
import Header from './components/Header';
import Footer from './components/Footer';

function App() {
  return (
    <AuthProvider>
      <Router>
        <div className="flex flex-col min-h-screen bg-gray-100">
          <Header />
          <main className="flex-grow container mx-auto px-4 py-8">
            <nav className="mb-4">
              <ul className="flex space-x-4">
                <li><Link to="/" className="text-blue-500 hover:text-blue-700">Home</Link></li>
                <li><Link to="/login" className="text-blue-500 hover:text-blue-700">Login</Link></li>
                <li><Link to="/register" className="text-blue-500 hover:text-blue-700">Register</Link></li>
              </ul>
            </nav>
            <Routes>
              <Route path="/" element={<QRScanner />} />
              <Route path="/review/:restaurantId" element={<ReviewForm />} />
              <Route path="/dashboard/:restaurantId" element={<RestaurantDashboard />} />
              <Route path="/coupons" element={<CouponSystem />} />
            </Routes>
          </main>
          <Footer />
        </div>
      </Router>
    </AuthProvider>
  );
}

export default App;

================
File: src/index.css
================
@import 'tailwindcss/base';
@import 'tailwindcss/components';
@import 'tailwindcss/utilities';

================
File: src/index.js
================
import React from 'react';
import ReactDOM from 'react-dom/client';
import './index.css';
import App from './App';

const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(
  <React.StrictMode>
    <App />
  </React.StrictMode>
);

================
File: package.json
================
{
    "name": "restaurant-review-frontend",
    "version": "1.0.0",
    "private": true,
    "dependencies": {
        "autoprefixer": "^10.4.20",
        "axios": "^1.7.4",
        "postcss": "^8.4.41",
        "qrcode.react": "^3.1.0",
        "react": "^18.2.0",
        "react-dom": "^18.2.0",
        "react-qr-code": "^2.0.12",
        "react-router-dom": "^6.26.1",
        "react-scripts": "^5.0.1",
        "react-webcam": "^7.2.0",
        "tailwindcss": "^3.4.10"
    },
    "scripts": {
        "start": "react-scripts start",
        "build": "react-scripts build",
        "test": "react-scripts test",
        "eject": "react-scripts eject"
    },
    "eslintConfig": {
        "extends": [
            "react-app",
            "react-app/jest"
        ]
    },
    "browserslist": {
        "production": [
            ">0.2%",
            "not dead",
            "not op_mini all"
        ],
        "development": [
            "last 1 chrome version",
            "last 1 firefox version",
            "last 1 safari version"
        ]
    }
}

================
File: restaurant-review-frontend/tailwind.config.js
================
module.exports = {
  content: [
    "./src/**/*.{js,jsx,ts,tsx}",
    "./public/index.html"
  ],
  theme: {
    extend: {},
  },
  plugins: [],
}

================
File: .gitignore
================
.wasp/
*node_modules/
*package-lock.json
*main.7abff490.js*

# Ignore all dotenv files by default to prevent accidentally committing any secrets.
# To include specific dotenv files, use the `!` operator or adjust these rules.
.env
.env.*

# Don't ignore example dotenv files.
!.env.example
!.env.*.example

================
File: package.json
================
{
  "dependencies": {
    "apos-to-lex-form": "^1.0.5",
    "natural": "^8.0.1",
    "qrcode.react": "^3.1.0",
    "react-qr-reader": "^3.0.0-beta-1",
    "react-router-dom": "^6.26.1",
    "spelling-corrector": "^3.0.0",
    "stopword": "^3.1.1"
  },
  "devDependencies": {
    "autoprefixer": "^10.4.20",
    "minimist": "^1.2.8",
    "ms": "^2.1.3",
    "postcss": "^8.4.41",
    "tailwindcss": "^3.4.10"
  }
}

================
File: postcss.config.js
================
module.exports = {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
}

================
File: README.md
================
Project <3

================
File: tailwind.config.js
================
module.exports = {
    content: [
      "./src/**/*.{js,jsx,ts,tsx}",
    ],
    theme: {
      extend: {},
    },
    plugins: [],
  }
